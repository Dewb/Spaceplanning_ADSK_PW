<Workspace Version="0.8.0.1233" X="683.343673234451" Y="-1367.66535647765" zoom="0.610583885606893" Name="Home" RunType="Manual" RunPeriod="100" HasRunWithoutCrash="False">
  <NamespaceResolutionMap>
    <ClassMap partialName="Point" resolvedName="Autodesk.DesignScript.Geometry.Point" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Rectangle.Points[0]" resolvedName="Autodesk.DesignScript.Geometry.Rectangle" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Rectangle" resolvedName="Autodesk.DesignScript.Geometry.Rectangle" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Point.Z" resolvedName="Autodesk.DesignScript.Geometry.Point" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="List" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
    <ClassMap partialName="Vector" resolvedName="Autodesk.DesignScript.Geometry.Vector" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Curve" resolvedName="Autodesk.DesignScript.Geometry.Curve" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Curve.reverse" resolvedName="Autodesk.DesignScript.Geometry.Curve" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Vector.ZAxis" resolvedName="Autodesk.DesignScript.Geometry.Vector" assemblyName="ProtoGeometry.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <DSCoreNodesUI.Input.DoubleSlider guid="2aa2aa0b-051f-40d7-aa9e-5cb0b5ba33a3" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Elevator Proportion" x="3600.60561511818" y="2768.02556187318" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>1.25</System.Double>
      <Range min="0.25" max="3" step="0.25" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSIronPythonNode.PythonNode guid="3719525c-c82d-4453-b8cf-6bb58712191e" type="DSIronPythonNode.PythonNode" nickname="Elevator Dimensions" x="3991.37589691214" y="2746.25608271631" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
elevArea	=	IN[0]
ratio		=	IN[1]


len			=	math.sqrt(elevArea/ratio)
wid			=	elevArea/len
#Assign your output to the OUT variable
OUT = wid,len
#OUT = len,wid</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="868a7954-8eff-428e-861d-790b11492e06" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="TAG SWITCH" x="2601.51537324434" y="1859.21404218448" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="A=1;&#xA;B=&quot;EITHER 0 OR 1&quot;;" ShouldFocus="false" />
    <DSCoreNodesUI.Input.DoubleSlider guid="ac550d14-fe5f-4c02-b394-9c4a8baa43a0" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Lift Lobby Width" x="1750.75815713109" y="3038.97480389196" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>2</System.Double>
      <Range min="0.5" max="11" step="0.1" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSCoreNodesUI.Input.DoubleSlider guid="3c9da584-a4a5-4e65-bc78-7a785395b657" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Area per Elevator" x="3069.59219115531" y="3050.51331338327" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>5</System.Double>
      <Range min="1" max="100" step="0.1" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSCoreNodesUI.Input.IntegerSlider guid="734c4bd1-79dd-41fa-94f6-e7853f1a881d" type="DSCoreNodesUI.Input.IntegerSlider" nickname="Max Elevators" x="5577.73915560275" y="3402.64019817861" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Int32>5</System.Int32>
      <Range min="2" max="33" step="1" />
    </DSCoreNodesUI.Input.IntegerSlider>
    <Dynamo.Nodes.DSFunction guid="af947995-a8ab-4eec-93f9-fc6c56ab9069" type="Dynamo.Nodes.DSFunction" nickname="Floor Surface" x="2167.06568178825" y="1597.42068098098" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Surface.ByPatch@Autodesk.DesignScript.Geometry.Curve" />
    <DSCoreNodesUI.Input.IntegerSlider guid="a450c4e3-9c4c-40f1-9e07-ca41c64d6197" type="DSCoreNodesUI.Input.IntegerSlider" nickname="Max. Distance from nearest Core" x="1756.97228972079" y="3356.06181752829" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Int32>60</System.Int32>
      <Range min="5" max="609" step="1" />
    </DSCoreNodesUI.Input.IntegerSlider>
    <DSIronPythonNode.PythonNode guid="1612be2e-2aea-4340-8229-12ae72ca4ac0" type="DSIronPythonNode.PythonNode" nickname="BuiltArea Blocks" x="2609.45713811032" y="1665.56482015669" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

floor_AreaSrf = IN[0]
totalAREA=[]
for i in range(len(floor_AreaSrf)):
	floor_Area = floor_AreaSrf[i]
	totalBuiltArea = sum(floor_Area)
	totalAREA.append(totalBuiltArea)



#Assign your output to the OUT variable
OUT = totalAREA,sum(totalAREA)</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction guid="ed23a153-1f8a-4f82-8d8f-3ba531d6ba90" type="Dynamo.Nodes.DSFunction" nickname="GBA - Floor Area" x="2405.50233255566" y="1595.88185947774" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Surface.Area" />
    <DSIronPythonNode.PythonNode guid="07a599e5-558f-4934-9cae-8527bb18e24c" type="DSIronPythonNode.PythonNode" nickname="BasePoint Maker" x="3972.83427671786" y="2464.98025226814" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
rectList = IN[0]

ptList= [x.Center() for x in rectList]
#Assign your output to the OUT variable
OUT = ptList</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="fd6d25bd-d88d-4cf4-8782-f542af194703" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="BaseFloor Assets" x="3644.3621498899" y="2335.41833545055" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="{a.Width,a.Height};" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="a239fc6e-d882-484b-9cb4-4bd033383935" type="DSIronPythonNode.PythonNode" nickname="Service Core Components Strat 1" x="4841.21019951325" y="3542.94983885846" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="12">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import random

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

flr_WidthList		=	IN[0]
flr_HeightList		=	IN[1]
twr_BaseptList		=	IN[2]
num_passElev		=	IN[3][0]
num_servElev		=	IN[3][1]

passElev_Area		=	IN[4]
servElev_Area		=	IN[4]
tag					=	IN[5]
elevWidth			=	IN[6][0]
elevLength			=	IN[6][1]
restroomProp		=	IN[7]
techrmProp			=	IN[8]
liftLobbyWidth		=	IN[9]
corePtList			=	IN[10]



#compute service core width, length, and serviceCore====================================================================================================
def serviceCoreMaker(ptL):
	global area_banks, area_restroom,area_servmodule
	rd = random.uniform(0,1)
	#calc total area for service core for the tower
	serviceCore_Area 	= area_banks + area_restroom + area_servmodule;
	serviceCore_Area	= serviceCore_Area/len(ptL)
	area_banks			= area_banks/len(ptL)
	area_restroom		= area_restroom/len(ptL)
	area_servmodule		= area_servmodule/len(ptL)
	
	servCore_WidthL = []
	servCore_LengthL = []
	coreVerticesL = []
	b_FacL =[]
	serviceCore_RecL = []
	for i in range(len(ptL)):
		pt = ptL[i]			
		#calc aspect ratio of floor plate
		aspect_Ratio 		= 	flr_Width/flr_Height
		
		#adjust aspectratio
		if aspect_Ratio &lt; 0.65 : aspect_Ratio = 0.75
		if aspect_Ratio &gt; 1.3 : aspect_Ratio = 1.2
		
		
		#calc service core length and width
		if rd&lt;0.5:
			servCore_Length 	=	math.sqrt(serviceCore_Area/aspect_Ratio)
			servCore_Width		=	serviceCore_Area/servCore_Length	
		else:
			servCore_Width		=	math.sqrt(serviceCore_Area/aspect_Ratio)
			servCore_Length 	=	serviceCore_Area/servCore_Width	
		
		"""LATER MAKE AN ORIENT FUNCTION
		if len(ptL) == 1:
			#flipped width and length
			tm = servCore_Length
			servCore_Length = servCore_Width  
			servCore_Width = tm
		"""
		# get the coordinates of center pt
		x,y,z 					= 	pt.X,pt.Y,pt.Z	
		#make the service core rectangle object--------------------------------------------------------------------------------------------------------------1
		cs					= 	CoordinateSystem.ByOrigin(x,y,z)
		serviceCore_Rec 	= 	Rectangle.ByWidthHeight(cs,servCore_Width,servCore_Length)
		coreVertices		=	serviceCore_Rec.Points
		servCore_WidthL.append(servCore_Width)
		servCore_LengthL.append(servCore_Length)
		coreVerticesL.append(coreVertices)
		serviceCore_RecL.append(serviceCore_Rec)
	#comput elev bank factor--------------------------------------------------------------------
	b_Fac				=	area_banks/serviceCore_Area
	#return serviceCore_Rec,b_Fac,coreVertices,area_banks,area_banks,area_servmodule
	return servCore_WidthL,servCore_LengthL,coreVerticesL,b_Fac,serviceCore_RecL



#function to make boxes based off of width, length and vertices===========================================================================================
def makeBox(widthL,lengthL,verticesL,factor,tag):
	new_RecL=[]
	other_RecL=[]
	for i in range(len(widthL)):
		width = widthL[i]
		length = lengthL[i]
		vertices = verticesL[i]
		
		#calculate the shorter of width or height of service core
		if ( tag == 0):
			if (width &lt; length):
				new_Length 		=	length
				new_Width		=	factor*width
				other_Length 	=	length
				other_Width		=	width - new_Width
				index			=	3		
			else:
				new_Width		=	width	
				new_Length		=	factor*length
				other_Width 	=	width
				other_Length	=	length - new_Length
				index			=	2
		else:
			if (width &gt; length):
				new_Length 		=	length
				new_Width		=	factor*width
				other_Length 	=	length
				other_Width		=	width - new_Width
				index			=	3		
			else:
				new_Width		=	width	
				new_Length		=	factor*length
				other_Width 	=	width
				other_Length	=	length - new_Length
				index			=	2		
	
		
		cs1					= 	CoordinateSystem.ByOrigin(vertices[0].X,vertices[0].Y,0)
		cs2					= 	CoordinateSystem.ByOrigin(vertices[index].X,vertices[index].Y,0)
		# to make the primary rectangle ----------------------------------------------------------------------	
		new_Rec 			= 	Rectangle.ByWidthHeight(cs1,new_Width,new_Length)	
		new_Vec				= 	Vector.ByTwoPoints(new_Rec.Points[0],vertices[0])
		new_Rec				=	Geometry.Translate(new_Rec, new_Vec)
		ptsnew_Rec			=	new_Rec.Points
		# to make the secondary rectangle ----------------------------------------------------------------------	
		other_Rec 			= 	Rectangle.ByWidthHeight(cs2,other_Width,other_Length)	
		other_Vec			= 	Vector.ByTwoPoints(other_Rec.Points[index],vertices[index])
		other_Rec			=	Geometry.Translate(other_Rec, other_Vec)
		ptsother_Rec		=	other_Rec.Points
		
		new_RecL.append(new_Rec)
		other_RecL.append(other_Rec)
	
	return [new_RecL,other_RecL]
#============================================================================================================================================================



#make post computations======================================================================================================================================
def coreConfigurator(b_Fac):
	#make the elevator bank rectangle object-----------------------------------------------------1	
	bank_RecL			=	makeBox(servCore_Width,servCore_Length,coreVertices,b_Fac,tag)
	bank_RecLNew = []
	for i in range(len(bank_RecL)):
		bank_Rec = 	bank_RecL[i]
		widtry1				=	bank_Rec[0].Width
		lentry1				=	bank_Rec[0].Height
				
		# code to readjust the bank rectangle piece based on the final tech rooms and restroom blocks
		if ( widtry1&lt;lentry1):
			shortEdge		=	widtry1
			marked			=	0	
		else:
			shortEdge		=	lentry1
			marked			=	1
				
		if (elevWidth&lt;elevLength):elevEdge = elevWidth
		else:elevEdge =	elevLength			
		numE				=	int(shortEdge / elevEdge)
		numE				+=	1
			
		newDim				=	numE*elevEdge
		if ( marked ==0): ratio	= widtry1/newDim
		else: ratio	= lentry1/newDim
		b_Fac				=	ratio*b_Fac
		#COMMENT THE FOLLOWING IF THE PROPORTION IS ABNORMAL
		bank_RecL			=	makeBox(servCore_Width,servCore_Length,coreVertices,b_Fac,tag)
		
	return bank_RecL
	#-------------------------------------------------------------------------------------------------
#============================================================================================================================================================


#iterate through all the blocks and output lists for each---------------------------------------------
outList=[]
bankRecList= []
otherRecList=[]
areaRestrmList=[]
areaServModList=[]
servCoreList=[]

perc = 1.1

for i in range(len(twr_BaseptList)):

	flr_Width  = flr_WidthList[i]
	flr_Height = flr_HeightList[i]
	twr_Basept = twr_BaseptList[i]
	corePts	   = corePtList[i]
	
	#globals var, computer area banks, area restrm, area techrms--------------------------------------------------------------------------------------------
	cirProp = liftLobbyWidth/1.5
	
	area_banks			= servElev_Area*num_servElev[i]/perc + passElev_Area*num_passElev[i]/perc
	area_banks			+=cirProp*area_banks # added the circulation area
	area_restroom 		= restroomProp*area_banks								
	area_servmodule 	= techrmProp*area_banks
	
	
	#OUTPUT VALUES-------------------------------------------------------
	vals 				= 	serviceCoreMaker(corePts)
	servCore_Width		=	vals[0]
	servCore_Length		=	vals[1]
	coreVertices		=	vals[2]
	b_Fac				=	vals[3]
	serviceCore_Rec		=	vals[4]
	bank_Rec 			= 	coreConfigurator(b_Fac)	
	
	bankRecList.append(bank_Rec[0])
	otherRecList.append(bank_Rec[1])
	areaRestrmList.append(area_restroom)
	areaServModList.append(area_servmodule)
	servCoreList.append(serviceCore_Rec)
	
	

out = bankRecList,otherRecList,areaRestrmList,areaServModList,servCoreList


#Assign your output to the OUT variable
OUT = out

</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Block Width Height" x="3879.85601689111" y="2332.88934190332" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="width[0];&#xA;height[1];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="879012ae-02b6-4b1e-b2b1-20d0cfab7683" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Total Built Area" x="2771.47194155636" y="1665.56482015669" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];&#xA;a[1];" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="8d4d07be-682a-42eb-af22-21e2671b1bef" type="DSIronPythonNode.PythonNode" nickname="Number of Elevators Needed" x="3947.69497021933" y="2571.36069693674" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

totalBuiltAreaL	= 	IN[0]
passArea		=	IN[1]
servArea		=	IN[2]

passElevList=[]
servElevList=[]
#computes requirements of passenger and service elevators--------------------------------------------
for i in range(len(totalBuiltAreaL)):
	totalBuiltArea = totalBuiltAreaL[i]
	passElev = math.ceil(totalBuiltArea/passArea)
	servElev = math.ceil(totalBuiltArea/servArea)
	
	#make sure elevator counts are even
	if (passElev % 2 == 1): passElev += 1
	if (servElev % 2 == 1): servElev += 1
	
	passElevList.append(passElev)
	servElevList.append(servElev)




#Assign your output to the OUT variable
OUT = [passElevList, servElevList]</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="275be690-5a3f-485b-80f7-ac8d19efe42d" type="DSIronPythonNode.PythonNode" nickname="Core Placer Points Strat 1" x="4504.10218901902" y="3796.76678111596" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="4">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

emptyBox = IN[0]
type = IN[1]
inputLen = IN[2]
coreDim = IN[3]

#get the shorter dimension---------------------------------------------------------------
def getShorterDim(rec):
	width	=	rec.Width
	length	=	rec.Height
	points = 	rec.Points
	diagDist = Line.ByStartPointEndPoint(points[0],points[2]).Length
	if(width&lt;=length): 
		shortEdge	= width
		longEdge	= length
	else: 
		shortEdge 	= length
		longEdge  	= width
	return shortEdge,longEdge,diagDist
	#return longEdge,shortEdge
# END OF FUNCTION ------------------------------------------------------------------------


#makes the core rectangle based on number of req it has---------------------------------------------------------------------------------------
def makeCoreBox(rec,numCore,wid,ht,longEdge):
	coreList=[]
	cen = rec.Center()
	pts = rec.Points
	ptPlaceList = []
	#when just need to place one core
	if numCore ==1:
		cs = CoordinateSystem.ByOrigin(cen)
		coreRec= Rectangle.ByWidthHeight(cs,wid,ht)
		coreList.append(coreRec)
		ptPlaceList.append(cen)
	#when more than one core needs to be placed
	else:
		len1 = Line.ByStartPointEndPoint(pts[0],pts[1]).Length
		len2 = Line.ByStartPointEndPoint(pts[0],pts[3]).Length
		#find the longer edge and that line
		if len1 == longEdge:
			lin = Line.ByStartPointEndPoint(pts[0],pts[1])
		else:
			lin = Line.ByStartPointEndPoint(pts[0],pts[3])			
		linCen = lin.PointAtParameter(0.5)
		vec = Vector.ByTwoPoints(linCen,cen)
		linNew = lin.Translate(vec)
		#divide the line to get the points to place core		
		linNewLen = linNew.Length
		perDist = linNewLen/(numCore+1)
		
		#prepare the pointlist
		for i in range(numCore):
			pt = linNew.PointAtDistance((i+1)*perDist)
			ptPlaceList.append(pt)
	return ptPlaceList
#---------------------------------------------------------------------------------------------------------------------------------------------

# function which places core boxes into the empty boxes----------------------------------------------------------------------------------------
def placeCoreBox(boxList):		
	allCores=[]
	lenMeasure = inputLen
	wid = coreDim
	ht = coreDim
	for i in range(len(boxList)):
		rec = boxList[i]
		shortEdge = getShorterDim(rec)[0]
		longEdge = getShorterDim(rec)[1]
		diagDist = getShorterDim(rec)[2]
		if longEdge &gt; lenMeasure :
			numCore = int(math.ceil(longEdge/lenMeasure))	
		else :
			numCore=1
		coreRecs = makeCoreBox(rec,numCore,wid,ht,longEdge)
		allCores.append(coreRecs)
	return allCores
#----------------------------------------------------------------------------------------------------------------------------------------------



out = placeCoreBox(emptyBox)
#Assign your output to the OUT variable
OUT = out
#OUT = polytoRect(emptyBox[0])</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="45748629-e625-430b-b33a-b2c437d57dbb" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Area_RestRooms" x="5698.14535820344" y="3057.32641294343" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[2];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="a7e9f424-9740-4d40-afd1-1f4aae322780" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Other_Part Service Area" x="5649.97900090311" y="2879.00288776491" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[1];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="f4269aaf-9384-40ee-8269-b0836ca82d71" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Area_Service Module/ Tech rooms" x="5589.09413520584" y="2600.74887292967" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[3];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="59322da8-84c2-4652-aaed-b6043c40610e" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Service Core Full Block" x="5662.26064560812" y="2794.68986345949" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[4];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="7816939f-d2e5-4c40-8099-0ed64d83d87c" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Bank Rectangle Piece" x="5520.92182598038" y="2968.15171761693" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Bank_Rectangle[0];" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="ef4e036a-4c6e-4d4d-97bb-9e7da30a4a59" type="Dynamo.Nodes.DSFunction" nickname="Geometry.Intersect" x="5619.06812918029" y="2686.13428628" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry" />
    <DSIronPythonNode.PythonNode guid="599e3168-7c24-413f-8b77-44a84794b0ab" type="DSIronPythonNode.PythonNode" nickname="Elevator Packing Generator" x="6270.13449193256" y="2933.99289930792" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="7">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

mainRecL	=	IN[0]
elevWidth	=	IN[1][0]
elevLength	=	IN[1][1]
totElev		=	IN[2]
lobbyWidth	=	IN[3]
servicRecL	=	IN[4]
interLineL	=	IN[5]
maxElevs	=	IN[6]





def getNumRects():
	recShort	=	otherLen1
	recLong		=	commonLen	
	elevShort	=	getElevShorterDim(elevWidth,elevLength)[0]
	numRects	=	1	
	approx_numElevs	=	int(math.floor(recLong/elevShort))

	#Added to make total num of Elevs always even
	if approx_numElevs%2 &gt; 0: approx_numElevs += 1
	#-----------------------------------------------		
	elevShort 	=	recLong/approx_numElevs		
	while approx_numElevs &gt; maxElevs:
		numRects += 1
		approx_numElevs = int(approx_numElevs/2)	
	return int(numRects)
#-------------------------------------------------------------------------------------------


#to subdivide given rect to num of rects based on a num------------------------------------
def subDivRect(num,mainRec):	
	numRects = getNumRects()
	numRects = num
	if numRects &lt; 2 : 
		return "no need to split"
	
	recList = []
	length1 = commonLen
	length2 = otherLen1
	
	dimension = length1/numRects

	startRec = mainRec
	for i in range(numRects):		
		try:
			rec = splitBox(startRec,dimension,length2)
		except:
			recList.append(rec[1])
			return recList			
		recList.append(rec[0])		
		startRec = rec[1]			
	return recList
#------------------------------------------------------------------------------------------



#function to scale rectangles to add in corridors in between elevators-------------------------------------------------------------
def scaledRects(recLists):
	#make new recLists
	newRecs = recLists[:]
	del newRecs[0]
	del newRecs[-1]
	
	
	endRecs = [recLists[0],recLists[-1]]
	
	outRec=[]
	for rec in newRecs:
		pts = rec.Points
		basePt = pts[0]
		wid = rec.Width
		length = rec.Height
		
		l1 = Line.ByStartPointEndPoint(pts[0],pts[1])
		l2 = Line.ByStartPointEndPoint(pts[0],pts[3])
		
		len1 = l1.Length
		len2 = l2.Length
		fac = 0.75 # hardcoded
		
		#prepare basept, p1 and p2 from Scale1D
		if wid == len1: 
			fromPt = pts[1]
			toPt = l1.PointAtParameter(fac)
			midPt = l1.PointAtParameter(0.5)
		else: 
			fromPt = pts[3]
			toPt = l2.PointAtParameter(fac)
			midPt = l2.PointAtParameter(0.5)
		
		#find the vector to translate the scaled rect		
		pCrv = rec.Scale1D(basePt,fromPt,toPt)
		crv = pCrv.Curves()
		ptsNew = [x.StartPoint for x in crv]
			
		lNew1 = Line.ByStartPointEndPoint(ptsNew[0],ptsNew[1])
		lNew2 = Line.ByStartPointEndPoint(ptsNew[0],ptsNew[3])
			
		if wid == len1: midPtNew = lNew1.PointAtParameter(0.5)
		else: midPtNew = lNew2.PointAtParameter(0.5)
			
			
		#make the vec for translation
		vec= Vector.ByTwoPoints(midPtNew,midPt)
		pCrv = pCrv.Translate(vec)
		
		#block to make rectangle
		crv = pCrv.Curves()
		ptsNew = [x.StartPoint for x in crv]		
		rec = Rectangle.ByCornerPoints(ptsNew[0],ptsNew[3],ptsNew[2],ptsNew[1])
		outRec.append(rec)
			
		
	#code to work on the first and last rectangles.	
	for i in range(len(endRecs)):
		if (i==0):pass
		rec = endRecs[i]
		
		pts = rec.Points
		basePt = pts[0]
		wid = rec.Width
		length = rec.Height
		
		l1 = Line.ByStartPointEndPoint(pts[0],pts[1])
		l2 = Line.ByStartPointEndPoint(pts[0],pts[3])
		
		len1 = l1.Length
		len2 = l2.Length
		fac = 0.9 # hardcoded
		
		#prepare basept, p1 and p2 from Scale1D
		if wid == len1: 
			fromPt = pts[1]
			toPt = l1.PointAtParameter(fac)
			midPt = l1.PointAtParameter(0.5)
		else: 
			fromPt = pts[3]
			toPt = l2.PointAtParameter(fac)
			midPt = l2.PointAtParameter(0.5)
		
		
		
		#find the vector to translate the scaled rect		
		pCrv = rec.Scale1D(basePt,fromPt,toPt)
		crv = pCrv.Curves()
		if(i&gt;0):
			ptsNew = [x.StartPoint for x in crv]
			
			lNew1 = Line.ByStartPointEndPoint(ptsNew[0],ptsNew[1])
			lNew2 = Line.ByStartPointEndPoint(ptsNew[0],ptsNew[3])
			
			if wid == len1: midPtNew = lNew1.PointAtParameter(fac/2)
			else: midPtNew = lNew2.PointAtParameter(fac/2)
		
			#make the vec for translation
			vec= Vector.ByTwoPoints(midPtNew,midPt)
			pCrv = pCrv.Translate(vec)

		#block to make rectangle
		crv = pCrv.Curves()
		ptsNew = [x.StartPoint for x in crv]		
		rec = Rectangle.ByCornerPoints(ptsNew[0],ptsNew[3],ptsNew[2],ptsNew[1])
		
		endRecs[i] = rec
		#break	
		
		
	#finally merge all components
	finList=[]		
	finList.extend([endRecs[0]])
	finList.extend(outRec)
	finList.extend([endRecs[-1]])
		
	return finList
#-----------------------------------------------------------------------------------------------------------------------------------

#get the shorter dimension---------------------------------------------------------------
def getShorterDim(rec):
	width	=	rec.Width
	length	=	rec.Height
	if(width&lt;=length): 
		shortEdge	= width
		longEdge	= length
	else: 
		shortEdge 	= length
		longEdge  	= width
	return shortEdge,longEdge
# END OF FUNCTION ------------------------------------------------------------------------

#get the shorter dimension for elev-------------------------------------------------------
def getElevShorterDim(width,length):
	if(width&lt;length): 
		shortEdge	= width
		longEdge	= length
	else: 
		shortEdge = length
		longEdge  = width
	return shortEdge,longEdge
# END OF FUNCTION ------------------------------------------------------------------------

#====================================================================================================================================================================================
#make rects based on dimension given------------------------------------------------------------------------
def splitBox(rec,dim,length):
	recPts	=	rec.Points
	#make four lines for the input rectangles
	lin0		=	Line.ByStartPointEndPoint(recPts[0],recPts[1])#0
	lin1		=	Line.ByStartPointEndPoint(recPts[1],recPts[2])#1
	lin2 		=	Line.ByStartPointEndPoint(recPts[2],recPts[3])#2
	lin3		=	Line.ByStartPointEndPoint(recPts[3],recPts[0])#3
	# get the first point of first line
	firstPt		=	lin0.StartPoint
	
	# get the length and lines for those edges whose length matches input length
	if lin0.Length &gt;= length-0.005 and lin0.Length &lt;= length+0.005: 
		bigDimension = lin1.Length
		lineShort1 = lin1
		lineShort2 = lin3				
	if lin1.Length &gt;= length-0.005 and lin1.Length &lt;= length+0.005: 
		bigDimension = lin0.Length
		lineShort1 = lin0
		lineShort2 = lin2
	
	#get the points to make the two rectangles
	f1 		=	dim/bigDimension
	ptOut1	=	lineShort1.PointAtParameter(f1)
	ptOut2	=	lineShort2.PointAtParameter(1-f1)
	stPt1	=	lineShort1.StartPoint
	endPt1	=	lineShort1.EndPoint
	stPt2	=	lineShort2.StartPoint
	endPt2	=	lineShort2.EndPoint
	
	# make the new rectangle by corner points !! SEQUENCE OF CORNER POINTS MIGHT BE AN ISSUE
	rec1	=	Rectangle.ByCornerPoints(stPt1,endPt2,ptOut2,ptOut1)
	rec2	=	Rectangle.ByCornerPoints(ptOut1,ptOut2,stPt2,endPt1)
	#get the center points for two rects
	rec1Cen	=	rec1.Center()
	rec2Cen = 	rec2.Center()
	#get the vectors from the first pt
	vec1	=	Vector.ByTwoPoints(firstPt,rec1Cen)
	vec2	=	Vector.ByTwoPoints(firstPt,rec2Cen)
	#compare the length of the vectors to get how far are they from start pt
	vcLen1 	=	vec1.Length
	vcLen2 	=	vec2.Length
	#finally set them as the final ouput rect
	if vcLen1 &lt; vcLen2 :
		outRec1 = 	rec1
		outRec2 = 	rec2
	else:
		outRec1 = 	rec2
		outRec2 = 	rec1	
			
	return outRec1,outRec2
#---------------------------------------------------------------------------------------------------------------	
	
#main function making the elevator packings------------------------------------------------
def makeElevBox(bkRec,commonLen,otherLen1):
	inpRec = []
	inpRec.append(bkRec)

	elevDims	=	getElevShorterDim(elevWidth,elevLength)
	elevShort	=	elevDims[0]
	elevLong	=	elevDims[1]
	
	longCounter = 	0
	listDims	=	[]
	frstPtList	=	[]
	count		=	0
	
	#very imp transition@@@@@@@@@@@
	recShort	=	otherLen1
	recLong		=	commonLen
		
	numElevs	=	int(math.floor(recLong/elevShort))
	#"""
	#Added to make total num of Elevs always even
	if numElevs%2 &gt; 0: 
		numElevs += 1
		#elevShort = recLong/numElevs
	#-----------------------------------------------

	elevShort 	=	recLong/numElevs	
	areaElev 	=	elevShort*commonLen

	
	
	cap = 5		
	#BLOCK TO MAKE LIST OF DIMENSIONS TO PREPARE ELEV ROWS AND LOBBY PLACEMENTS
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
	#loop till you catch up with the dimension longitudinally
	while (cap&gt;0):
		longCounter += elevLong
		if (longCounter &gt; recShort): # recShort replaced by otherLen   +++ longCounter &gt; recShort-0.005 and longCounter &lt; recShort+0.005
			break
		listDims.append(elevLong)
		if (count%2 ==0):
			longCounter += lobbyWidth	
			if (longCounter &gt; recShort):# recShort replaced by otherLen
				break
			listDims.append(lobbyWidth)			
		count		+= 1
	ct = 0
	lobbies = 0
	# test to check whole length added
	for i in range(len(listDims)):
		ct += listDims[i]
		if (listDims[i] == lobbyWidth):
			lobbies += 1
	#if lobbies == 0: lobbies =1
	#get the left over space
	leftOver =  recShort - ct
	perBayAdd=  leftOver/lobbies
	perBayAdd+=	0.002
	
	# distribute it to the lift lobbies
	if (perBayAdd &gt; 0):
		for i in range(len(listDims)):
			if (listDims[i] == lobbyWidth):
				listDims[i] += perBayAdd + 0.002
	
	#added to make sure the total dimension not exceeding
	if sum(listDims)&gt;otherLen1:
		extra = sum(listDims)-otherLen1
		listDims[-1] -= extra
	
	recLists = []
	stRec	 = bkRec

	index1 = 0
	index2 = 1
	longDim = getShorterDim(servicRec)[1]
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
	
	str =""
	prnList=[]
	#BLOCK TO MAKE ELEVATOR ROWS
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
	for i in range(len(listDims)-1):		
		try:
			rec = splitBox(stRec,listDims[i],commonLen)		
			prnList.append("DID IT")
		except:
			#nRec = stRec.Reverse
			#rec = splitBox(nRec,listDims[i],commonLen)	
			str =  "Not Done"
			prnList.append("FAILED")
			#continue
		recLists.append(rec[0])
		#frstPtList.append(rec[2])
		stRec = rec[1]
		if (i==len(listDims)-2): 
			recLists.append(rec[1])
			prnList.append("LAST CASE")
			#break
	
	#make the list of elevator row first
	elevRowLists = []
	copRecLists =  []
	str = "dont know"
	strN= ""
	for i in range(len(recLists)):
		if i ==0: dimA = listDims[i+1]		
		#if dimA != listDims[i]: copRecLists.append(recLists[i])		

		if i != 0 and dimA !=listDims[i-1] and i == len(recLists)-1 : 
			pass
		elif dimA != listDims[i]: copRecLists.append(recLists[i])
			
		#copRecLists = list(recLists[i] if dimA == listDims[i]:)
	
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	#BLOCK TO PLACE ELEVATOR BOXES IN THE ROWS
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	str2 = ""
	recElevs=[]
	recElevsRow=[]
	for i in range(len(copRecLists)):
		stRec = copRecLists[i]
		elevRow=[]
		shorter = getShorterDim(stRec)[0]
		for j in range(int(numElevs)-1):		
			try:
				rec = splitBox(stRec,elevShort+0.0002,shorter)				
			except:
				#continue
				stt = ""
			stRec = rec[1]
			elevRow.append(rec[0])
			if j==int(numElevs)-2: 
				elevRow.append(rec[1])
			
			#frstPtList.append(rec[2])
			recElevs.append(rec)
			str2 =  " all added" 
		recElevsRow.append(elevRow)
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
	totalElev = [len(x) for x in recElevsRow]
	sumtotalElev = sum(totalElev)
	#return recLists,listDims,recDims[0],copRecLists,recElevs,len(recElevs)
	return recElevsRow


def mainCode(mainRec):
	numRc = getNumRects()
	if numRc &gt;=2:
		aRects = subDivRect(getNumRects(),mainRec)
		subRects = scaledRects(aRects)
	else:
		subRects = [mainRec]
	outL = []
	strList=[]
	for i in range(numRc):
		
		bankRec = subRects[i]
		comLen = interLine.Length/numRc
		
		# set commonLength and otherLength
		if (comLen == bankRec.Width): 
			otrLen = bankRec.Height
		elif (comLen == bankRec.Height): 
			otrLen = bankRec.Width
		elif (bankRec.Width&lt;bankRec.Height):
			comLen = bankRec.Width
			otrLen = bankRec.Height
		else:
			comLen = bankRec.Height
			otrLen = bankRec.Width
				
		out = makeElevBox(bankRec,comLen,otrLen)
		outL.append(out)
	return outL
	
#function to see rectangle size ---------------------------------------------------------------------------------------------
def sizeChecker(rec,dim):
	wid = rec.Width
	ht = rec.Height	
	if wid &lt; dim or ht &lt; dim:
		return False
	else: return True
#----------------------------------------------------------------------------------------------------------------------------



outF=[]
interLine  = interLineL[0]
testLen=[]
for i in range(len(mainRecL)):
	#1st Block lev handling each rect block
	coreInside = mainRecL[i]
	#outF.append(len(coreInside))
	interLine  = interLineL[i][0][0]

	out1=[]
	for j in range(len(coreInside)):
		interLine  = interLineL[i][j][0]
		commonLen	=	float(interLine.Length)
		otherLen1	=	0
		mainRec 	= 	coreInside[j]
		bankRec 	= 	mainRec
		servicRec 	=	servicRecL[i][j]
			
		if (commonLen &gt; mainRec.Width-0.005 and commonLen &lt; mainRec.Width+0.005): otherLen1 = float(mainRec.Height)
		if (commonLen &gt; mainRec.Height-0.005 and commonLen &lt; mainRec.Height+0.005): otherLen1 = float(mainRec.Width)
		out = mainCode(mainRec)
		testLen.append(otherLen1)
		out1.append(out)
	outF.append(out1)
		

		
	

#Assign your output to the OUT variable
OUT = outF
</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="d150f1bb-500e-42b9-ad82-a7c3b4a1c3d5" type="DSIronPythonNode.PythonNode" nickname="Total Elevs Per Block" x="4873.12390521016" y="1681.94883072179" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN


elevLists = IN[0]

num = len(elevLists)
finLists=[]
for i in range(num):
	finLists.append(sum(elevLists[i]))


	

#Assign your output to the OUT variable
OUT = finLists</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction guid="c155fb81-334d-4ca4-baa0-c63442677f68" type="Dynamo.Nodes.DSFunction" nickname="List.Transpose" x="4667.67059756729" y="1680.92989676946" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.Transpose@var[]..[]" />
    <DSIronPythonNode.PythonNode guid="903120c6-a2bc-4a7f-9324-f0befe0d91a7" type="DSIronPythonNode.PythonNode" nickname="Technical Rooms + Restrooms" x="5895.28231781229" y="2963.0644994751" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import random

wrapperRectL		=	IN[0]
areaTechnicalL		=	IN[1]
areaRestrmL			=	IN[2]



#function to make two rectangle pieces to divide ----------------------------------------------------
def makeTwoPiece(width,length,pts,f1,f2,flip):
	if flip ==0:
		if (width &gt; length):
			rec1Length 		=	f1*length
			rec1Width		=	width
			
			rec2Length 		=	length-rec1Length#f2*length
			rec2Width		=	width
					
			index			=	1		
		else:
			rec1Length 		=	length
			rec1Width		=	f1*width
			
			rec2Length 		=	length
			rec2Width		=	width-rec1Width#f2*width
				
			index			=	3
	else:
		if (width &lt; length):
			rec1Length 		=	f1*length
			rec1Width		=	width
			
			rec2Length 		=	length-rec1Length#f2*length
			rec2Width		=	width
					
			index			=	1		
		else:
			rec1Length 		=	length
			rec1Width		=	f1*width
			
			rec2Length 		=	length
			rec2Width		=	width-rec1Width#f2*width
				
			index			=	3
	
	cs1					= 	CoordinateSystem.ByOrigin(pts[0].X,pts[0].Y,0) 
	
	# to make the 1st rectangle ----------------------------------------------------------------------	
	rec1 				= 	Rectangle.ByWidthHeight(cs1,rec1Width,rec1Length)	
	rec1Vec				= 	Vector.ByTwoPoints(rec1.Points[0],pts[0])
	rec1				=	Geometry.Translate(rec1, rec1Vec)
	rec1Pt				=	rec1.Points	
	cs1					= 	CoordinateSystem.ByOrigin(rec1Pt[0].X,rec1Pt[0].Y,0)
	
	# to make the 2nd rectangle ----------------------------------------------------------------------	
	rec2 				= 	Rectangle.ByWidthHeight(cs1,rec2Width,rec2Length)	
	rec2Vec				= 	Vector.ByTwoPoints(rec2.Points[0],rec1Pt[index])
	rec2				=	Geometry.Translate(rec2, rec2Vec)
	rec2Pt				=	rec2.Points	
	
	return rec1,rec2
#END OF FUNCTION#-------------------------------------------------------------------------------------
#main function called and executed----------------------------------------------------------------------
def mainCode():
	outT = []
	outR1 = []
	outR2 = []
	
	for i in range(len(wrapperRectL)):
		#tag = random.randint(0,1)
		# incoming rectangle specifications
		wrapR = wrapperRectL[i]
		recListTech=[]
		recListRest1=[]
		recListRest2=[]
		for j in range(len(wrapR)):
			wrapPts			=	wrapR[j].Points
			wrapWidth		=	wrapR[j].Width
			wrapLength		=	wrapR[j].Height
			#added to make the cut direction------------------------------
			if wrapWidth &gt; wrapLength : ratio = wrapLength/wrapWidth
			else : ratio = wrapWidth/wrapLength			
			if ratio &lt; 0.4 : tag = 1
			else: tag = 0 
			
			#----------------------------------------------------------------------------------------
				
			totArea			=	wrapWidth * wrapLength
			facT			=	areaTechnicalL[i][j] / totArea
			facR			=	areaRestrmL[i][j] / totArea
			
			
			
			recA = makeTwoPiece(wrapWidth,wrapLength,wrapPts,0.6,0.4,tag)
			recB = makeTwoPiece(recA[1].Width,recA[1].Height,recA[1].Points,0.5,0.5,1)
			recListTech.append(recA[0])
			recListRest1.append(recB[0])
			recListRest2.append(recB[1])
			
		outT.append(recListTech)
		outR1.append(recListRest1)
		outR2.append(recListRest2)
	return outT,outR1,outR2
#-------------------------------------------------------------------------------------------------------

#Assign your output to the OUT variable
OUT = mainCode()</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="88d9fd1f-c501-4b1a-9092-bd3d72fcc76a" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Technical Rooms" x="6267.70206255657" y="2766.07090221647" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="Toilet[0];&#xA;Toilet[2];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="1fee66bf-756f-47be-81bc-059d7b7b49b2" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Floor Curve" x="6267.06411164072" y="2680.15565594857" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="floorcrv;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="30c768a4-1f41-4c2c-bcb6-cf020b9dc548" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Toilets" x="6267.54053893735" y="2594.87259151678" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="Toilet[1];" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="95479b69-5cbb-4336-80ba-37d5fce71073" type="DSIronPythonNode.PythonNode" nickname="Technical Room Arrangements&#xD;&#xA;" x="6547.81553022302" y="2842.80290916701" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#import random
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

mainRecList		=	IN[0]

#---------------------------------------------------------------



# 1 = LONGITUDINAL CUT		0 = TRAVERSAL CUT
#make boxes inside--------------------------------------------------------------------------------
def splitRec(rec,f1,tag):
	recPoints	=	rec.Points
	width		=	rec.Width
	length		=	rec.Height
	#make the four edges of the input rectangle
	lineList	=	[]
	for i in range(len(recPoints)):
		if(i== len(recPoints)-1):
			k = 0
		else:
			k = i+1
		ptA		=	recPoints[i]
		ptB		=	recPoints[k]
		lin		=	Line.ByStartPointEndPoint(ptA,ptB)
		lineList.append(lin)
		
	#pick two points on the shorter lines
	len1	=	lineList[0].Length
	len2	=	lineList[1].Length
	if (tag == 1):
		if (len1&lt;len2):
			lineShort1	=	lineList[0]
			lineShort2	=	lineList[2]
		else:
			lineShort1	=	lineList[1]
			lineShort2	=	lineList[3]
	else:
		if (len1&gt;len2):
			lineShort1	=	lineList[0]
			lineShort2	=	lineList[2]
		else:
			lineShort1	=	lineList[1]
			lineShort2	=	lineList[3]
		
		
	ptOut1	=	lineShort1.PointAtParameter(f1)
	ptOut2	=	lineShort2.PointAtParameter(1-f1)
	stPt1	=	lineShort1.StartPoint
	endPt1	=	lineShort1.EndPoint
	stPt2	=	lineShort2.StartPoint
	endPt2	=	lineShort2.EndPoint
	# make the new rectangle by corner points !! SEQUENCE OF CORNER POINTS MIGHT BE AN ISSUE
	outRec1	=	Rectangle.ByCornerPoints(stPt1,endPt2,ptOut2,ptOut1)
	outRec2	=	Rectangle.ByCornerPoints(stPt2,endPt1,ptOut1,ptOut2)
		
	#return lineShort1,lineShort2,ptOut1,ptOut2,width,length,outRec1,outRec2
	return outRec1,outRec2
	#return lineList
#END OF FUNCTION# --------------------------------------------------------------------------------


finalList=[]
for i in range(len(mainRecList)):
	mainRecL = mainRecList[i]
	getList = []
	for j in range(len(mainRecL)):
		mainRec 		= 	mainRecL[j]
		outList			=	[]
		twoLinearRecs	=	splitRec(mainRec,0.60,0)
		rec1			=	twoLinearRecs[0]
		rec2			=	twoLinearRecs[1]
		for k in range(3):
			#fac		=	random.random()
			fac 	=	0.35
			out1 	=	splitRec(rec1,fac,0)
			outList.append(out1)
			rec1	=	out1[1]			
			out2 	=	splitRec(rec2,fac,0)
			outList.append(out2)
			rec2	=	out2[1]		
		getList.append(outList)
	finalList.append(getList)
	
	

#Assign your output to the OUT variable
#OUT = lineStoreList,lineList,restrmPoints,shortLine,finalPoint
OUT = finalList</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="3df664c4-cf2c-421b-98a3-30ffd488bb28" type="DSIronPythonNode.PythonNode" nickname="Area Generator RestRoom + TechRoom" x="5895.86133277374" y="2604.11895801822" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

otherRecList = IN[0]
restRmAreaL  = IN[1]
techRmAreaL  = IN[2]



#proportion generator for restrm Area and Techroom Area---------------------------------------------------
def propGenerator():
	propTechL=[]
	propRestL = []
	for i in range(len(otherRecList)):
		techArea = techRmAreaL[i]
		restrmArea = restRmAreaL[i]
		propTechArea = techArea/(techArea+restrmArea)
		propRestArea = 1-propTechArea
		propTechL.append(propTechArea)
		propRestL.append(propRestArea)
	return propTechL,propRestL
#---------------------------------------------------------------------------------------------------------

#main Code called and run---------------------------------------------------------------------------------
def mainCode():
	areaRestrmList=[]
	areaTechrmList=[]
	propL = propGenerator()
	for i in range(len(otherRecList)):
		otherRecL = otherRecList[i]	
		propTech = propL[0][i]	
		propRest = propL[1][i]
		restAreaL = []
		techAreaL = []
		for j in range(len(otherRecL)):
			rec = otherRecL[j]
			recArea = rec.Width * rec.Height
			techArea = propTech * recArea
			restArea = propRest * recArea
			techAreaL.append(techArea)
			restAreaL.append(restArea)
		areaTechrmList.append(techAreaL)
		areaRestrmList.append(restAreaL)			

	return areaTechrmList, areaRestrmList
#--------------------------------------------------------------------------------------------------------


out = mainCode()
#Assign your output to the OUT variable
OUT = out</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="a1707fe3-b13a-42d3-a492-795cdce17ff9" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Area_RestRooms_Final" x="5894.14213669229" y="2741.33930611131" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[1];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="ef11afca-5d65-4104-bd81-ec44bc36f7ad" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Area_Tech rooms_Final" x="5895.32901986647" y="2828.18231962636" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="f904476b-4d4d-4cdf-a2c5-22f70188e33f" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Number of Elev Per Bank" x="7004.02793365104" y="2909.94096903725" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="numberElevPerBank[1];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="1c8deb62-9bdb-4bdf-9df2-e136d59b3ea8" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Boundary Factor" x="6906.19793917655" y="3235.06408185921" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="boundaryFactor = 0.9;" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" type="DSIronPythonNode.PythonNode" nickname="Key Floor Finder" x="7409.21940225206" y="2793.39678751671" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="7">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

buildSectionsList 	= 	IN[0]
grossBuildAreaList	=	IN[1]
elevPerbankListL	=	IN[2]
boundaryFactor		=	IN[3]
servModAreaList		=	IN[4]
elevArea			=	IN[5]
numFloorsList		=	IN[6]



#compute target area for each bank of elev serving each building section--------------------------------------------------------------------
def targetAreaCalculator(uba,buildSections):
	#output target area list for each bank of elev for each building section
	tarAreaList = []	
	#make the uba array
	totalBuildArea = 0
	for i in range(len(uba)):
		totalBuildArea += uba[i]		
	# compute the fraction
	frac 	=	totalBuildArea/buildSections
	
	#compute the target areas by iterating
	for i in range(1,buildSections+1):
		tarAreaList.append(frac*i)	
	return tarAreaList
#-------------------------------------------------------------------------------------------------------------------------------------------

#ccompute the key floors where the banks of elevators needs to be dropped-------------------------------------------------------------------
def keyFloorFinder():
	currentFloor = 1 # current floor counter
	#computer bank Area for each bank ( from elev Area )
	bankArea = [x*elevArea for x in elevPerbankList] 
	#bankArea = [10000 for x in elevPerbankList] 
	
	# iterate to find usable Build Area first
	ubaList = []
	for i in range(len(grossBuildArea)):
		ubaList.append(grossBuildArea[i]-servModArea)
	#compute the targetAreaList
	tarAreaList = targetAreaCalculator(ubaList,buildSections)
	
	#make the served areas list and key floor list and set as 0 values
	servedAreaList = [0 for x in range(buildSections)]		
	key = [0 for x in range(buildSections)]
	
	while currentFloor &lt;= len(ubaList)-1:
		#iterate to check if target is reached
		for i in range(buildSections):
			if servedAreaList[i] &lt; tarAreaList[i] and tarAreaList[i] - servedAreaList[i] &gt;= ubaList[currentFloor]*boundaryFactor:
				ubaList[currentFloor] = ubaList[currentFloor] - bankArea[i] 
		#iterate to check if target is reached	
		for i in range(buildSections):
			if servedAreaList[i] &lt; tarAreaList[i] and tarAreaList[i] - servedAreaList[i] &gt;= ubaList[currentFloor]*boundaryFactor:
				# update served areas and the key floors
				servedAreaList[i] = servedAreaList[i] + ubaList[currentFloor] 
				key[i]	=	key[i] + 1		
		#still checking if target has been reached
		for i in range(buildSections):
			if servedAreaList[i] &gt; tarAreaList[i] and servedAreaList[i] - tarAreaList[i] &gt;= ubaList[currentFloor] - ubaList[currentFloor]*boundaryFactor:
				servedAreaList[i] = servedAreaList[i] - ubaList[key[i]]
				ubaList[key[i]] = ubaList[key[i]] + bankArea[i] 
				for j in range(i+1,buildSections):
					servedAreaList[j] = servedAreaList[j] + bankArea[i] 
					key[i] = key[i] - 1
		tarAreaList = targetAreaCalculator(ubaList,buildSections)
		currentFloor += 1
	return [key,servedAreaList,tarAreaList,ubaList]
#-------------------------------------------------------------------------------------------------------------------------------------------



finalOut =[]
for i in range(len(grossBuildAreaList)):
	grossBuildArea = grossBuildAreaList[i]
	buildSections = buildSectionsList[i]
	elevL = elevPerbankListL[i]
	servModAreaL = servModAreaList[i]
	keyF=[]
	for j in range(len(servModAreaL)):
		elevPerbankList = elevL[j]		
		servModArea = servModAreaL[j]
		tarAreaList = 	targetAreaCalculator(grossBuildArea,buildSections)
		keyFloors	=	keyFloorFinder()
		
		keysTest = keyFloors[0]
		
		count =0
		for i in range(len(keysTest)):
			if keysTest[i] ==0: count += 1
		if count &gt; len(keysTest)/2:
			for i in range(len(keysTest)):
				keysTest[i] = numFloors
		
		keyFloors[0]	= 	keysTest
		keyF.append(keyFloors)
	finalOut.append(keyF)
		
		

#Assign your output to the OUT variable
#OUT = keysTest#
OUT = finalOut</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="10cebea5-de1b-4aaa-bc6e-3cb4bf87b46f" type="DSIronPythonNode.PythonNode" nickname="OneList" x="6530.93605151041" y="2938.83323362862" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

listElevsList = IN[0]
interLineList = IN[1]





#make one list of the whole elev sublists---------------------------------
def oneList():
	return [z for x in listElevs for y in x for z in y]
#-------------------------------------------------------------------------


#to get the sorted elevs based on distance from closest point to the intersect line---------------------------------------------------------------------
def newSortElevs():
	sortedRect=[]
	avgRecList=[]
	recList = oneList()
	closePtList =[]	
	distList = []
	for i in range(len(recList)):
		recPt = recList[i].Center()		
		closePt = Geometry.ClosestPointTo(interLine[0],recList[i])
		closePtList.append(closePt)
		dist = Line.ByStartPointEndPoint(closePt,recPt).Length
		distList.append(dist)
	
	copyRecList = recList[:]
	sortedDistList = distList[:]
	sortedDistList.sort()
	
	for i in range(len(recList)):
		sortDis = sortedDistList[i]
		for j in range(len(copyRecList)):
			if sortDis == distList[j]:
				found = copyRecList[j]
				del copyRecList[j]
				del distList[j]
				break
		sortedRect.append(found)
	#return distList,sortedDistList,recList,sortedRect,copyRecList
	return sortedRect
#-----------------------------------------------------------------------------------------------------------------------------------------------------------

#calc number of elev per row---------------------------------------------------------------------------------------------------------------------------------
def numElevsperRow():
	for i in range(len(listElevs)):
		x = len(listElevs)
		y = len(listElevs[0][0])
		val = x*y
		break
	return val
#-----------------------------------------------------------------------------------------------------------------------------------------------------------

#make one list into lists as per rows of elev----------------------------------------------------------------------------------------------------------------
def makeListRow():
	numElevsRow = numElevsperRow()
	sortedElevList = newSortElevs()
	
	#create list of elevators who are combined together per row.
	num = int(len(oneList())/numElevsRow)
	megaList=[]	
	for i in range(num):
		x = i*numElevsRow
		alist = []
		for j in range(x,x+numElevsRow):			
			alist.append(sortedElevList[j])
		megaList.append(alist)
	return megaList
#-----------------------------------------------------------------------------------------------------------------------------------------------------------

#sort the rows based on the start point of instersect line--------------------------------------------------------------------------------------------------
def sortSecondRun():
	rowElevList = makeListRow()
	stPoint = interLine[0].PointAtParameter(0)

	# get the distance list for each row
	fullDistance=[]
	for i in range(len(rowElevList)):
		recList = rowElevList[i]
		disList=[]		
		for j in range(len(recList)):
			rec = recList[j]
			dist = Line.ByStartPointEndPoint(stPoint,rec.Center()).Length
			disList.append(dist)
		fullDistance.append(disList)
	
	
	#sort the distance list
	sortedDistList = fullDistance[:]
	copyElevs = rowElevList[:]
	for i in range(len(sortedDistList)):
		sortedDistList[i] = fullDistance[i][:]
		copyElevs[i] = rowElevList[i][:]
		sortedDistList[i].sort()
	
	#make the new recLists sorted
	for i in range(len(rowElevList)):
		recList = rowElevList[i]
		sortList = sortedDistList[i]
		distList1 = fullDistance[i]
				
		for j in range(len(sortList)):
			rec = recList[j]
			sortdis = sortList[j]
			newRec=[]
			for k in range(len(sortList)):
				if float(sortdis) == float(distList1[k]):
					rowElevList[i][j] = copyElevs[i][k]					
					break
	rev = []
	for i in range(len(rowElevList)):
		rev.append(rowElevList[-i])
	#return fullDistance,rowElevList,distList1,sortedDistList
	return rowElevList
#-----------------------------------------------------------------------------------------------------------------------------------------------------------




"""
listElevsList = IN[0]
interLineList = IN[1]
"""



fin = []
for i in range(len(listElevsList)):
	listElevL = listElevsList[i]
	interLineL = interLineList[i]
	newL=[]
	for j in range(len(listElevL)):
		listElevs = listElevL[j]
		interLine = interLineL[j]
		result = sortSecondRun()
		newL.append(result)
	fin.append(newL)
















#Assign your output to the OUT variable
#OUT = oneList(),out,makePts(),scaleVals(),newSortElevs(),numElevsperRow(),sortSecondRun()
#OUT = sortSecondRun()
OUT = fin</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="d8b40901-d208-4b8b-82ef-878ddaddfd63" type="DSIronPythonNode.PythonNode" nickname="Separate Bank Maker" x="6631.56059458745" y="2527.37733119222" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

elevBoxesList = IN[0]
buildSectionsList=IN[1]





#to fix the sequence of elevators in the elv boxes----------------------------------------------------------------------		
def reverseList():
	global elevBoxes	
	cnt =0
	for i in range(len(elevBoxes)-1):	
		if (i)%2 == 0:
			cnt += 1
			if cnt%2==0:
				str =""
				elevBoxes[i].reverse()
				elevBoxes[i+1].reverse()
#-----------------------------------------------------------------------------------------------------------------------	


#to make one list of input elev lists-----------------------------------------------------------------------------------
def totalElevList():
	newElevBoxes=[]	
	for i in range(len(elevBoxes)):
		elev = elevBoxes[i]
		for j in range(len(elev)):
			newElevBoxes.append(elev[j])
	return newElevBoxes
#-----------------------------------------------------------------------------------------------------------------------	


#to distribute number of elevators per bank based on number elev per row------------------------------------------------
def bankNumbers():
	listElevBoxes=totalElevList()
	totalElevNum = len(listElevBoxes)
	bankNum=[]
	
	perDivision = int(math.floor(totalElevNum/buildSections))
	if (perDivision &gt;= numElevRow): perDivision = numElevRow
	if (perDivision &lt; numElevRow): perDivision = int(numElevRow/2)
	diff = totalElevNum - (perDivision*buildSections)
	
	
	if perDivision &gt;=1:
		for i in range(buildSections):
			bankNum.append(perDivision)
		bankNum[-1] += diff
	
	
	#to make all if they all are even numbers
	surplus =0
	for i in range(len(bankNum)):
		if bankNum[i]%2 !=0:
			bankNum[i] -= 1
			surplus	+= 1
	if surplus &gt; 0 : bankNum[-1] += surplus	
	bankNum.sort()
	bankNum.reverse()

	return bankNum
#-----------------------------------------------------------------------------------------------------------------------

#to make separate banks of elevs based on number of building sections---------------------------------------------------
def makePairs():
	str = []
	newElevsList =[]
	for i in range(0,numRows,2): 
		if i == numRows-1:			
			newElevsList.extend(elevBoxes[-1])
			str.append("entered here")
		else:		
			listA = elevBoxes[i]
			listB = elevBoxes[i+1]
			newList = crossLists(listA,listB)
			newElevsList.extend(newList)
			str.append("may be")				
	return newElevsList
#-----------------------------------------------------------------------------------------------------------------------

#to cross two lists togthr and return one list out----------------------------------------------------------------------
def crossLists(listA,listB):
	crossedList = []
	for i in range(len(listA)):
		crossedList.append(listA[i])
		crossedList.append(listB[i])
	return crossedList
#-----------------------------------------------------------------------------------------------------------------------


#to make separate banks of elevs based on number of building sections---------------------------------------------------
def makeBanks():
	#listElevBoxes=totalElevList()
	#totalElevNum = len(listElevBoxes)
	
	listElevBoxes=makePairs()
	totalElevNum = len(listElevBoxes)
	
	elevperBank = bankNumbers()
	elevCount   = 0
	perRowCount = 0
	listBanks=[]
	temp =0	
	for i in range(buildSections):
		elevAtBank =[]
		xVal = elevperBank[i]		
		for j in range(xVal):
			try:
				elevAtBank.append(listElevBoxes[temp+j])
			except:
				print "some error"
			#elevAtBank.append(listElevBoxes[temp+j])
			if ( j == xVal-1): temp = temp + xVal
		listBanks.append(elevAtBank)
	return listBanks
#------------------------------------------------------------------------------------------------------------------------


outN1=[]
outN2=[]
outTots=[]
for i in range(len(elevBoxesList)):
	elevBoxesL= elevBoxesList[i]
	buildSections = buildSectionsList[i]
	getL1=[]
	getL2=[]
	sum=0
	for j in range(len(elevBoxesL)):
		elevBoxes = elevBoxesL[j]
		numElevRow = len(elevBoxes[0])
		numRows = len(elevBoxes)
		#reverseList()
		out = makeBanks()
		out2 = bankNumbers()
		#crossed = makePairs()
		getL1.append(out)
		getL2.append(out2)
		sum += len(totalElevList())
	outN1.append(getL1)
	outN2.append(getL2)
	outTots.append(sum)



#Assign your output to the OUT variable
OUT = outN1,outN2,outTots
</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="dd5e0569-228b-47de-8b41-3c3e9992047d" type="DSIronPythonNode.PythonNode" nickname="Building sections per Volume" x="6270.59870137818" y="2352.61624174092" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import random



spaceList = IN[0]
buildSec = IN[1]

buildSecs = []
for i in range(len(spaceList)):
	x = random.randint(1,5)
	buildSecs.append(x)
	

#Assign your output to the OUT variable
OUT = buildSecs</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="5ea270e8-1be9-42b0-8915-a7af312a821a" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Elevators" x="8548.45530192366" y="249.639066629954" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="cf10eef3-cebf-4e5a-9b61-513006e72f2f" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="GBA" x="7002.5251087941" y="2816.5905738684" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="grossBuildingArea;" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="453022bb-860d-4177-82ce-88a7dcea4e91" type="DSIronPythonNode.PythonNode" nickname="Num Floors Each Block" x="7005.19399776496" y="3003.0114043685" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

flrList = IN[0]

out=[]
for i in range(len(flrList)):
	out.append(flrList[i].Count)


#Assign your output to the OUT variable
OUT = out</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="0942b713-d985-4d61-a2d0-788908152b66" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Target Areas for Banks" x="8009.37670613884" y="2711.51936988214" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="targetAreas[2];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="0b7f5ad5-a16d-4c3c-a42a-b482fd9378fe" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Updated UBA" x="8012.26697924676" y="2813.29358074646" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="updatedUBA[3];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="407b1006-41a4-4600-b34e-baead4cfb0e7" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Served Areas by Banks" x="8011.73667402986" y="2910.85230956488" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="servedAreas[1];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="73e95364-e73a-4337-9543-03a6a09286f9" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Ecap" x="6909.82808085411" y="3355.7616388771" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="ecap= 1000;" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="843c144f-6497-4e21-a4f6-a300e266a735" type="DSIronPythonNode.PythonNode" nickname="Feedback Function" x="8342.30232891586" y="2887.49938797127" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="5">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

ubaListList 			= 	IN[0]
servedAreaListList		=	IN[1]
numElevPerBankList		=	IN[2]
ecap					=	IN[3]
buildSectionsList		=	IN[4]

#--------------------------------------------------------------------------------------------------------------------

# to compute the efficiency of set elevator layouts------------------------------------------------------------------
def feedBack():
	#make a list of area for building sections
	sections	= [0 for x in range(buildSections)]
	sections[0] = servedAreaList[0] # first building section area
	#isolated building section areas  
	totBankCap = 0
	for i in range(1,buildSections):
		sections[i] = servedAreaList[i] - servedAreaList[i-1]
		# total elevator bank capacity
		totBankCap  +=numElevPerBank[i]*ecap	
	#total UBA
	ubaTotal = 0
	for i in range(len(ubaList)):
		ubaTotal 	+=ubaList[i]
	
	#percentage of uba served by every bank
	percentUBA_Bank	= [0 for x in range(buildSections)]
	#used capacity of the banks
	ucap			= [0 for x in range(buildSections)]
	# added to test errors
	if totBankCap ==0 : totBankCap  =1
	for i in range(buildSections):
		percentUBA_Bank[i] = (sections[i]*100)/ubaTotal
		ucap[i] = (sections[i]*100)/totBankCap
	
	return percentUBA_Bank,ucap	
#--------------------------------------------------------------------------------------------------------------------	

outF=[]
for i in range(len(ubaListList)):
	ubaL = ubaListList[i]
	buildSections = buildSectionsList[i]
	
	for j in range(len(ubaL)):
		ubaList = ubaL [j]
		servedAreaList = servedAreaListList[i][j]
		numElevPerBank = numElevPerBankList[i][j]		
		out = feedBack()
	outF.append(out)






#Assign your output to the OUT variable
OUT = outF</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="5d1b39b1-969d-4a26-a874-69696f624dd9" type="DSIronPythonNode.PythonNode" nickname="Final Num Elevators" x="8337.33428311876" y="2795.03139158305" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

rectListList = IN[0]

finX = []

for i in range(len(rectListList)):# big blocks
	rectL = rectListList[i]
	x=0
	for j in range(len(rectL)):# num cores
		rec = rectL[j]
		x += len(rec[0])*len(rec)
	finX.append(x)

#Assign your output to the OUT variable
OUT = finX</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="80296a7c-3afc-47b9-b874-99ce710d86ee" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Key Floors" x="8551.50015435255" y="157.620104702685" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="keyFloors[0];" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="65236426-c712-41c1-ab44-e91adffb856b" type="DSIronPythonNode.PythonNode" nickname="Key OutputGenerator" x="7737.72083051512" y="2837.29486272448" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

keyList = IN[0]



#[key,servedAreaList,tarAreaList,ubaList]
finKeyList=[]
finServedAreaList = []
fintarAreaList = []
finubaList = []
for i in range(len(keyList)):
	keyL = keyList[i]
	finKeyL=[]
	finServedAreaL= []
	fintarAreaL = []
	finubaL = []
	for j in range(len(keyL)):
		key = keyL[j]
		finKeyL.append(key[0])
		finServedAreaL.append(key[1])
		fintarAreaL.append(key[2])
		finubaL.append(key[3])
	finKeyList.append(finKeyL)
	finServedAreaList.append(finServedAreaL)
	fintarAreaList.append(fintarAreaL)
	finubaList.append(finubaL)

out = finKeyList,finServedAreaList,fintarAreaList,finubaList
#Assign your output to the OUT variable
OUT = out</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="fd242a9f-8214-48ad-9997-38fe4d82afe3" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Total Elevator Expected" x="8336.98878853613" y="2708.60489939622" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="totElev_Expected;" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="4847187c-ff80-484b-a041-d51d04c3e7cd" type="DSIronPythonNode.PythonNode" nickname="Variable height : Elevators" x="9710.78329859659" y="-47.0424669482796" isVisible="false" isUpstreamVisible="false" lacing="Disabled" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

floorsList		=	IN[0]
keyFloorsList	=	IN[1]
elevListList	=	IN[2]

def elevExtruder():
	extruded=[]
	keyFloors.reverse()
	p1		=	Point.ByCoordinates(0,0,0);
	p2		=	Point.ByCoordinates(0,0,100);
	vec		=	Vector.ByTwoPoints(p1,p2)
	for i in range(len(elevList)):
		flr = floors[keyFloors[i]]
		cen = flr.EndPoint
		zVal= cen.Z
		crv = elevList[i]
		geom=[]
		for j in range(len(crv)):
			ext	=	Curve.ExtrudeAsSolid(crv[j],vec,zVal)		
			geom.append(ext)		
		extruded.append(geom)
	return extruded

finExt=[]
for i in range(len(elevListList)):
	floors = floorsList[i]	
	keyFloors = keyFloorsList[i]
	elevList = elevListList[i]
	extL=[]
	for j in range(len(elevList)):	
		keyFloors = keyFloorsList[i][j]
		elevList = elevListList[i][j]	
		ext = elevExtruder()
		extL.append(ext)
	finExt.append(extL)


#Assign your output to the OUT variable
OUT = finExt#finExt</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction guid="6f53f637-8b26-4ad8-90a4-46e425884827" type="Dynamo.Nodes.DSFunction" nickname="Face.Vertices" x="10000.2312207691" y="132.769715896519" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Face.Vertices" />
    <Dynamo.Nodes.DSFunction guid="3b808e33-a864-4165-8669-fa53ecabe992" type="Dynamo.Nodes.DSFunction" nickname="Face.Vertices" x="9995.27583607921" y="-60.5023608388743" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Face.Vertices" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="ac397449-72b8-4053-8904-c07f461562a2" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Elevators File Location" x="11111.0231968281" y="38.8864246315248" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a={&quot;C:\Users\Colin\Documents\GitHub\Akaba\services\generators\ExeBridge\ExeBridge\Generator\Vision\Dynamo\elevators.csv&quot;};" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="233e1889-93af-4320-8e13-3c884c7e0311" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Service Modules File Location" x="11104.5051373549" y="-135.919077442903" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a={&quot;C:\Users\Colin\Documents\GitHub\Akaba\services\generators\ExeBridge\ExeBridge\Generator\Vision\Dynamo\servicemodules.csv&quot;};" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="12939b65-2328-4bf0-804f-fe86f8bac92f" type="Dynamo.Nodes.DSFunction" nickname="CSV.WriteToFile" x="11858.0847653432" y="42.4330769936397" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.IO.CSV.WriteToFile@string,var[][]" />
    <Dynamo.Nodes.DSFunction guid="d5d5782c-489e-4304-9b38-8b6a751471a6" type="Dynamo.Nodes.DSFunction" nickname="CSV.WriteToFile" x="11854.0451032367" y="-92.3921905276741" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.IO.CSV.WriteToFile@string,var[][]" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="7e69020c-148e-4bc9-979b-d596f5afed1f" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="TRANSLATED FLOORS" x="8548.45530192366" y="-128.080889820052" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="FLOORS;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="85ef2fe9-43ab-415a-bebb-9b321b470057" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="TECHROOMS + RESTROOMS" x="8544.24786483265" y="55.7415793781049" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="TECHRMS_RESTRMS;" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="f851aa59-4231-4990-b812-3e292c8b9055" type="DSIronPythonNode.PythonNode" nickname="Extruded Tech Rooms" x="9711.39947311631" y="-163.350363038921" isVisible="false" isUpstreamVisible="false" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

floorsList		=	IN[0]
techRoomsList	=	IN[1]



def extruder():
	extruded=[]
	for i in range(len(techRooms)):
		flr = floors[-1]
		cen = flr.EndPoint
		zVal= cen.Z
		crv = techRooms[i]
		extN = crv.Extrude(zVal)
		extruded.append(extN)
	return extruded

finExt = []
heightlist=[]
for i in range(len(techRoomsList)):
	techRoomsL = techRoomsList[i]
	floors = floorsList[i]
	flr = floors[-1]	
	cen = flr.EndPoint
	zVal= cen.Z
	heightL=[]
	for j in range(len(techRoomsL)):		
		techRooms = techRoomsL[j]
		extruded=[]
		for k in range(len(techRooms)):
			techR = techRooms[k]
			
			extN = techR.ExtrudeAsSolid(zVal)
			extruded.append(extN)
			heightL.append(zVal)
		finExt.append(extruded)
	heightlist.append(heightL)
		
		
#Assign your output to the OUT variable
OUT = finExt,heightlist
</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="28d06a4b-83af-430e-b24a-95451ef5cb10" type="DSIronPythonNode.PythonNode" nickname="Edge Picker Strat2" x="3693.07635137083" y="3872.93108076442" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="4">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

emptyBox = IN[0]
type = IN[1]
inputLen = IN[2]
coreDim = IN[3]


#finds number of closest rectangle pieces to find---------------------------------------------------------------------------------------------
def adjacencyList(type):
	adjList = []
	if type ==1: adjList = [0]
	if type ==2: adjList = [1,1]
	if type ==3: adjList = [1,2,1]
	if type ==4: adjList = [2,2,2,2]	
	return adjList
#---------------------------------------------------------------------------------------------------------------------------------------------



#find the common edges between two boxes------------------------------------------------------------------------------------------------------
def findCloseRects(boxList,type):
	indexList = []
	adjList = adjacencyList(type)
	distList=[]
	sortDistList = []
	for i in range(len(boxList)):
		rec = boxList[i]
		recCen = rec.Center()
		distL =[]
		sortL =[]
		indexL=[]		
		for j in range(len(boxList)):
			rec2 = boxList[j]
			recCen2 = rec2.Center()
			dist = recCen.DistanceTo(recCen2)
			#done to make sure further away rectangles dont counted as being close
			v1 = Vector.ByTwoPoints(recCen,recCen2)
			if v1.Length != 0:
				str = "1st enetered"
				vangX = v1.AngleBetween(Vector.XAxis())
				vangY = v1.AngleBetween(Vector.YAxis())
				if type == 4:				
					if int(vangX) == 0 or int(vangY) == 0:
						str ="2nd entered"
						dist = 900000000000000000000000000	
				if type == 5:
					if int(vangX) &lt;30 or int(vangY) &lt;30:
						str ="2nd entered"
						dist = 1		
			
			distL.append(dist)
			
		sortList = distL[:]
		sortList.sort()
		sortL.Add(sortList)
		sortDistList.Add(sortList)
		distList.Add(distL)
		
	indexList=[]
	for i in range(len(distList)):
		distL = distList[i]
		sortL = sortDistList[i]
		numAdj = adjList[i]
		indexL=[]
		for k in range(numAdj):			
			for j in range(len(distL)):			
				if sortL[k+1] == distL[j]:
					index = j
					indexL.append(index)
					#break
		indexList.append(indexL)
	"""
	indexList=[]
	#hardcode it
	indexList.append([2,3])
	indexList.append([3,2])
	indexList.append([1,0])
	indexList.append([1,0])	
	"""	
	return indexList
#---------------------------------------------------------------------------------------------------------------------------------------------
#finds the closest point from a list of points------------------------------------------------------------------------------------------------
def closestPoint(ptA,ptBList):
	distList=[]
	for i in range(len(ptBList)):
		ptB = ptBList[i]
		dist = ptA.DistanceTo(ptB)
		distList.append(dist)

	sortDistList = distList[:]
	sortDistList.sort()
	
	for i in range(len(sortDistList)):
		for j in range(len(sortDistList)):
			if sortDistList[0] == distList[j]: closePtList = ptBList[j]
		break
	return closePtList
#---------------------------------------------------------------------------------------------------------------------------------------------

def edgePicker(boxList,type):
	str = "did not enter"
	edgeList = findCommonEdges(boxList,type)
	finalRecLines=[]
	for i in range(len(boxList)):
		rec = boxList[i]
		recPts = rec.Points
		recLines = rec.Curves()
		list=[]		
		coprecLines = recLines[:]
		list.extend(coprecLines)
		edgeL = edgeList[i]
		pickedLines = []
		for k in range(len(edgeL)):			
			for j in range(len(list)):
				recL = recLines[j]
				rcStart = recL.StartPoint
				rcEnd	= recL.EndPoint
				rLine1 = Line.ByStartPointEndPoint(rcStart,rcEnd)
				rLine2 = Line.ByStartPointEndPoint(rcEnd,rcStart)
				"""
				if rLine1.Length == edgeL[k].Length and rLine1.PointAtParameter(0.5) == edgeL[k].PointAtParameter(0.5): 
					str = "it entered"
					del list[j]	
					break
				else: pickedLines.Add(recL)
				"""
				if rLine1.Length == edgeL[k].Length:
					if	rLine1.PointAtParameter(0.5) == edgeL[k].PointAtParameter(0.5) or rLine2.PointAtParameter(0.5) == edgeL[k].PointAtParameter(0.5):
						str = "it entered"
						del list[j]	
						break
				else: pickedLines.Add(recL)
				
				
						
		finalRecLines.Add(list)
	if type == 4: del finalRecLines[3][-1]
	finalRecLines = convToLine(finalRecLines)
	return finalRecLines


#finds common edges between neighboring rect pieces---------------------------------------------------------------------------------------------
def findCommonEdges(boxList,type):
	TAG = 0
	edgeList = []
	closePtList = []
	indexList = findCloseRects(boxList,type)
	for i in range(len(boxList)):
		rec = boxList[i]
		recCen = rec.Center()
		recPts = rec.Points
		indexL = indexList[i]
		edgeL =[]
		closeL =[]
		for j in range(len(indexL)):
			ind = indexL[j]
			recSide = boxList[ind]
			recSideCen = recSide.Center()
			lin = Line.ByStartPointEndPoint(recCen,recSideCen)
			midPt = lin.PointAtParameter(0.5)
			recSidePts = recSide.Points
			closePt1 = closestPoint(midPt,recSidePts)
			closePt2 = closestPoint(midPt,recPts)
			closePt3 = closestPoint(closePt1,recPts)
			if closePt3 == closePt2 : 
				edge = Line.ByStartPointEndPoint(closePt1,closePt2)
				edge = edgeRedo(rec,edge)				
			else : 
				edge = Line.ByStartPointEndPoint(closePt3,closePt2)
			edgeL.Add(edge)
			closeL.Add([closePt1,closePt2])
		closePtList.Add(closeL)
		edgeL = edgeCleaner(edgeL)		
		edgeList.Add(edgeL)
		
	return edgeList
#----------------------------------------------------------------------------------------------------------------------------------------------

#to clean duplicate items in a list------------------------------------------------------------------------------------------------------------
def edgeCleaner(edgeList):
	copEdgeList = edgeList[:]
	if len(edgeList) &gt; 1:
		for i in range(len(edgeList)-1):		
			edge1 = edgeList[i]
			edge2 = edgeList[i+1]			
			if edge1.PointAtParameter(0.5) == edge2.PointAtParameter(0.5) and edge1.Length == edge2.Length : 
				del copEdgeList[i+1]		
	return copEdgeList
#----------------------------------------------------------------------------------------------------------------------------------------------
#to convert curves to lines--------------------------------------------------------------------------------------------------------------------
def convToLine(edgeList):
	lineList=[]
	for i in range(len(edgeList)):
		lineL=[]
		for j in range(len(edgeList[i])):
			lineL.Add(Line.ByStartPointEndPoint(edgeList[i][j].StartPoint,edgeList[i][j].EndPoint))
		lineList.Add(lineL)
	return lineList
#---------------------------------------------------------------------------------------------------------------------------------------------
#to compute the exact edge on the rec which corresponds to the common intersected edge found---------------------------------------------------
def edgeRedo(rec,edge):
	finalEdgeList = []
	recVecList = []
	recLineList = []
	vecEdge = Vector.ByTwoPoints(edge.StartPoint,edge.EndPoint)
	recPts  = rec.Points
	
	midEdge = edge.PointAtParameter(0.5)
	
	recVecList.Add(Vector.ByTwoPoints(recPts[0],recPts[1]))
	recVecList.Add(Vector.ByTwoPoints(recPts[1],recPts[2]))
	recVecList.Add(Vector.ByTwoPoints(recPts[2],recPts[3]))
	recVecList.Add(Vector.ByTwoPoints(recPts[3],recPts[0]))
	
	recLineList.append(Line.ByStartPointEndPoint(recPts[0],recPts[1]))
	recLineList.append(Line.ByStartPointEndPoint(recPts[1],recPts[2]))
	recLineList.append(Line.ByStartPointEndPoint(recPts[2],recPts[3]))
	recLineList.append(Line.ByStartPointEndPoint(recPts[3],recPts[0]))
	
	newLineList=[]
	distList =[]
	for i in range(len(recVecList)):
		recVec = recVecList[i]
		ang = Vector.AngleBetween(vecEdge,recVec)
		finalEdgeList.append(ang)
		if int(ang) == 0 :
			mid = recLineList[i].PointAtParameter(0.5)
			dist = midEdge.DistanceTo(mid)
			distList.Add(dist)
			newLineList.Add(recLineList[i])
			
	checkDist = 10000000000000000000000	
	for i in range(len(newLineList)):
		if distList[i] &lt; checkDist:
			index = i
			checkDist = distList[i]			
	return newLineList[index]
#----------------------------------------------------------------------------------------------------------------------------------------------




out = edgePicker(emptyBox,type)
#out = findCommonEdges(emptyBox,type)
#out = findCloseRects(emptyBox,type)
#Assign your output to the OUT variable
OUT = out
#OUT = polytoRect(emptyBox[0])</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="a6e42b9e-57c1-4793-b50b-6a3e0bbfc790" type="DSIronPythonNode.PythonNode" nickname="Core Placer Points Strat 2" x="4485.1747396743" y="2888.03811199643" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="5">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

emptyBox = IN[0]
type     = IN[1]
inputLen = IN[2]
coreDim  = IN[3]
edgeList = IN[4]


#get the shorter dimension---------------------------------------------------------------
def getShorterDim(rec):
	width	=	rec.Width
	length	=	rec.Height
	points = 	rec.Points
	diagDist = Line.ByStartPointEndPoint(points[0],points[2]).Length
	if(width&lt;=length): 
		shortEdge	= width
		longEdge	= length
	else: 
		shortEdge 	= length
		longEdge  	= width
	return shortEdge,longEdge,diagDist
	#return longEdge,shortEdge
# END OF FUNCTION ------------------------------------------------------------------------


#makes the core rectangle based on number of req it has---------------------------------------------------------------------------------------
def makeCoreBox(rec,numCore,wid,ht,longEdge):
	coreList=[]
	cen = rec.Center()
	pts = rec.Points
	ptPlaceList = []
	#when just need to place one core
	if numCore ==1:
		cs = CoordinateSystem.ByOrigin(cen)
		coreRec= Rectangle.ByWidthHeight(cs,wid,ht)
		coreList.append(coreRec)
		ptPlaceList.append(cen)
	#when more than one core needs to be placed
	else:
		len1 = Line.ByStartPointEndPoint(pts[0],pts[1]).Length
		len2 = Line.ByStartPointEndPoint(pts[0],pts[3]).Length
		#find the longer edge and that line
		if len1 == longEdge:
			lin = Line.ByStartPointEndPoint(pts[0],pts[1])
		else:
			lin = Line.ByStartPointEndPoint(pts[0],pts[3])			
		linCen = lin.PointAtParameter(0.5)
		vec = Vector.ByTwoPoints(linCen,cen)
		linNew = lin.Translate(vec)
		#divide the line to get the points to place core		
		linNewLen = linNew.Length
		perDist = linNewLen/(numCore+1)
		
		#prepare the pointlist
		for i in range(numCore):
			pt = linNew.PointAtDistance((i+1)*perDist)
			ptPlaceList.append(pt)
	return ptPlaceList
#---------------------------------------------------------------------------------------------------------------------------------------------

# function which places core boxes into the empty boxes----------------------------------------------------------------------------------------
def getNumCores(boxList):		
	numCoresList=[]
	lenMeasure = inputLen
	wid = coreDim
	ht = coreDim
	for i in range(len(boxList)):
		rec = boxList[i]
		shortEdge = getShorterDim(rec)[0]
		longEdge = getShorterDim(rec)[1]
		diagDist = getShorterDim(rec)[2]
		if longEdge &gt; lenMeasure :
			numCore = int(math.ceil(longEdge/lenMeasure))	
		else :
			numCore=1
		numCoresList.append(numCore)
	return numCoresList
#----------------------------------------------------------------------------------------------------------------------------------------------




def placeCorePoints(boxList,edgeList):
	pointList=[]
	numCoreList = getNumCores(boxList)
	
	finCoreList=[]
	ptFinalList=[]
	for i in range(len(boxList)):
		edgeL = edgeList[i]
		recL = boxList[i]
		numCores = numCoreList[i]
		getCore = 0
		corePlaced =0
		coreList =[]
		count = 0
		while corePlaced &lt; numCores:
			#fill in 0 to initiate the coreList for 1st time
			if count == 0:
				for j in range(len(edgeL)):
					coreList.Add(0)				
			for j in range(len(edgeL)):
				corePlaced += 1
				if corePlaced &gt; numCores : break				
				coreList[j] += 1				
			count += 1
		finCoreList.Add(coreList)
		ptPlaceList = []
		for j in range(len(edgeL)):
			edge = edgeL[j]
			coresEdge = coreList[j]
			perDist = edge.Length/(coresEdge+1)	
			for k in range(coresEdge):
					
				pt = edge.PointAtDistance((k+1)*perDist)
				ptPlaceList.append(pt)
		ptFinalList.Add(ptPlaceList)
			
	 	
	return ptFinalList





out = placeCorePoints(emptyBox,edgeList)
#Assign your output to the OUT variable
OUT = out</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="5a06cf0b-2e98-4173-8f75-16d4b587d864" type="DSIronPythonNode.PythonNode" nickname="Service Core Components Strat 2" x="4828.52151090201" y="2673.85768359141" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="12">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import random
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

flr_WidthList		=	IN[0]
flr_HeightList		=	IN[1]
twr_BaseptList		=	IN[2]
num_passElev		=	IN[3][0]
num_servElev		=	IN[3][1]

passElev_Area		=	IN[4]
servElev_Area		=	IN[4]
tag					=	IN[5]
elevWidth			=	IN[6][0]
elevLength			=	IN[6][1]
restroomProp		=	IN[7]
techrmProp			=	IN[8]
liftLobbyWidth		=	IN[9]
corePtList			=	IN[10]
corDim				=	IN[11]



#compute service core width, length, and serviceCore====================================================================================================
def serviceCoreMaker(ptL):
	global area_banks, area_restroom,area_servmodule
	rd = random.uniform(0,1)
	#calc total area for service core for the tower
	serviceCore_Area 	= area_banks + area_restroom + area_servmodule;
	serviceCore_Area	= serviceCore_Area/len(ptL)
	area_banks			= area_banks/len(ptL)
	area_restroom		= area_restroom/len(ptL)
	area_servmodule		= area_servmodule/len(ptL)
	
	servCore_WidthL = []
	servCore_LengthL = []
	coreVerticesL = []
	b_FacL =[]
	serviceCore_RecL = []
	for i in range(len(ptL)):
		pt = ptL[i]			
		#calc aspect ratio of floor plate
		aspect_Ratio 		= 	flr_Width/flr_Height
		
		#adjust aspectratio
		if aspect_Ratio &lt; 0.65 : aspect_Ratio = 0.75
		if aspect_Ratio &gt; 1.3 : aspect_Ratio = 1.2
		#calc service core length and width
		if rd&gt;0.5:
			servCore_Length 	=	math.sqrt(serviceCore_Area/aspect_Ratio)
			servCore_Width		=	serviceCore_Area/servCore_Length	
		else:
			servCore_Width		=	math.sqrt(serviceCore_Area/aspect_Ratio)
			servCore_Length 	=	serviceCore_Area/servCore_Width	
		
	
		# get the coordinates of center pt
		x,y,z 					= 	pt.X,pt.Y,pt.Z	
		#make the service core rectangle object--------------------------------------------------------------------------------------------------------------1
		cs					= 	CoordinateSystem.ByOrigin(x,y,z)
		serviceCore_Rec 	= 	Rectangle.ByWidthHeight(cs,servCore_Width,servCore_Length)
		serviceCore_Rec 	=	orientFixNEW(serviceCore_Rec,twr_Basept,pt,servCore_Width,servCore_Length)
		
		
		
		coreVertices		=	serviceCore_Rec.Points
		servCore_WidthL.append(servCore_Width)
		servCore_LengthL.append(servCore_Length)
		coreVerticesL.append(coreVertices)
		serviceCore_RecL.append(serviceCore_Rec)
	#comput elev bank factor--------------------------------------------------------------------
	b_Fac				=	area_banks/serviceCore_Area
	#return serviceCore_Rec,b_Fac,coreVertices,area_banks,area_banks,area_servmodule
	return servCore_WidthL,servCore_LengthL,coreVerticesL,b_Fac,serviceCore_RecL



#function to make boxes based off of width, length and vertices===========================================================================================
def makeBox(widthL,lengthL,verticesL,factor,tag):
	new_RecL=[]
	other_RecL=[]
	for i in range(len(widthL)):
		width = widthL[i]
		length = lengthL[i]
		vertices = verticesL[i]
		
		#calculate the shorter of width or height of service core
		if ( tag == 0):
			if (width &lt; length):
				new_Length 		=	length
				new_Width		=	factor*width
				other_Length 	=	length
				other_Width		=	width - new_Width
				index			=	3		
			else:
				new_Width		=	width	
				new_Length		=	factor*length
				other_Width 	=	width
				other_Length	=	length - new_Length
				index			=	2
		else:
			if (width &gt; length):
				new_Length 		=	length
				new_Width		=	factor*width
				other_Length 	=	length
				other_Width		=	width - new_Width
				index			=	3		
			else:
				new_Width		=	width	
				new_Length		=	factor*length
				other_Width 	=	width
				other_Length	=	length - new_Length
				index			=	2		
	
		
		cs1					= 	CoordinateSystem.ByOrigin(vertices[0].X,vertices[0].Y,0)
		cs2					= 	CoordinateSystem.ByOrigin(vertices[index].X,vertices[index].Y,0)
		# to make the primary rectangle ----------------------------------------------------------------------	
		new_Rec 			= 	Rectangle.ByWidthHeight(cs1,new_Width,new_Length)	
		new_Vec				= 	Vector.ByTwoPoints(new_Rec.Points[0],vertices[0])
		new_Rec				=	Geometry.Translate(new_Rec, new_Vec)
		ptsnew_Rec			=	new_Rec.Points
		# to make the secondary rectangle ----------------------------------------------------------------------	
		other_Rec 			= 	Rectangle.ByWidthHeight(cs2,other_Width,other_Length)	
		other_Vec			= 	Vector.ByTwoPoints(other_Rec.Points[index],vertices[index])
		other_Rec			=	Geometry.Translate(other_Rec, other_Vec)
		ptsother_Rec		=	other_Rec.Points
		
		new_RecL.append(new_Rec)
		other_RecL.append(other_Rec)
	
	return [new_RecL,other_RecL]
#============================================================================================================================================================



#make post computations======================================================================================================================================
def coreConfigurator(b_Fac):
	#make the elevator bank rectangle object-----------------------------------------------------1	
	bank_RecL			=	makeBox(servCore_Width,servCore_Length,coreVertices,b_Fac,tag)
	bank_RecLNew = []
	for i in range(len(bank_RecL)):
		bank_Rec = 	bank_RecL[i]
		widtry1				=	bank_Rec[0].Width
		lentry1				=	bank_Rec[0].Height
				
		# code to readjust the bank rectangle piece based on the final tech rooms and restroom blocks
		if ( widtry1&lt;lentry1):
			shortEdge		=	widtry1
			marked			=	0	
		else:
			shortEdge		=	lentry1
			marked			=	1
				
		if (elevWidth&lt;elevLength):elevEdge = elevWidth
		else:elevEdge =	elevLength			
		numE				=	int(shortEdge / elevEdge)
		numE				+=	1
			
		newDim				=	numE*elevEdge
		if ( marked ==0): ratio	= widtry1/newDim
		else: ratio	= lentry1/newDim
		b_Fac				=	ratio*b_Fac
		#bank_RecL			=	makeBox(servCore_Width,servCore_Length,coreVertices,b_Fac,tag)
		
	return bank_RecL
	#-------------------------------------------------------------------------------------------------
#============================================================================================================================================================
#to fix the orientation of the serviceCores-----------------------------------------------------------
def orientFixNEW(servCore,twr_Basept,crPt,wid,ht):
	vecX = Vector.XAxis()
	vecY = Vector.YAxis()
	
	vecMain = Vector.ByTwoPoints(crPt,twr_Basept)
	vecMainNormal = vecMain.Normalized()
	
	valX = vecMainNormal.X * vecX.X
	valY = vecMainNormal.Y * vecY.Y
	
	if valX &lt; 0:
		vecX = vecX.Reverse()
		pass
	if valY &lt; 0:
		vecY = vecY.Reverse()
		pass

		
	angX = Vector.AngleBetween(vecMain,vecX) 
	angY = Vector.AngleBetween(vecMain,vecY)
	if angX &lt;= 80 and angX &gt;= 0: # 50 &amp; 10 .... 100 &amp; 10
		vecMain = vecX.Scale((wid/2)+(corDim/2))
		#vecMain = vecX.Scale(wid/2)		
		servCore = servCore.Translate(vecMain)
	if angY &lt;= 80 and angY &gt;= 0:
		vecMain = vecY.Scale((ht/2)+(corDim/2))
		#vecMain = vecY.Scale(ht/2)
		servCore = servCore.Translate(vecMain)
	
	return servCore
#-----------------------------------------------------------------------------------------------------


#iterate through all the blocks and output lists for each---------------------------------------------
outList=[]
bankRecList= []
otherRecList=[]
areaRestrmList=[]
areaServModList=[]
servCoreList=[]

perc = 1.1

for i in range(len(twr_BaseptList)):

	flr_Width  = flr_WidthList[i]
	flr_Height = flr_HeightList[i]
	twr_Basept = twr_BaseptList[i]
	corePts	   = corePtList[i]
	
	#globals var, computer area banks, area restrm, area techrms--------------------------------------------------------------------------------------------
	cirProp = liftLobbyWidth/1.5
	
	area_banks			= servElev_Area*num_servElev[i]/perc + passElev_Area*num_passElev[i]/perc
	area_banks			+=cirProp*area_banks # added the circulation area
	area_restroom 		= restroomProp*area_banks								
	area_servmodule 	= techrmProp*area_banks
	
	
	#OUTPUT VALUES-------------------------------------------------------
	vals 				= 	serviceCoreMaker(corePts)
	servCore_Width		=	vals[0]
	servCore_Length		=	vals[1]
	coreVertices		=	vals[2]
	b_Fac				=	vals[3]
	serviceCore_Rec		=	vals[4]
	bank_Rec 			= 	coreConfigurator(b_Fac)	
	
	bankRecList.append(bank_Rec[0])
	otherRecList.append(bank_Rec[1])
	areaRestrmList.append(area_restroom)
	areaServModList.append(area_servmodule)
	servCoreList.append(serviceCore_Rec)
	
	

out = bankRecList,otherRecList,areaRestrmList,areaServModList,servCoreList

#Assign your output to the OUT variable
OUT = out
</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="763ac683-0f60-4681-bd7c-65074ce9c4bd" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="ServiceCore Types" x="5554.21439077571" y="2502.82213359257" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="serviceCore_Types;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="79dde83d-39a3-4872-8118-5d8dc6101d79" type="Dynamo.Nodes.DSFunction" nickname="Face.Edges" x="10002.7209469355" y="41.3676178521187" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Face.Edges" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="75c3823f-6205-446a-b597-66c8ceb2aae7" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="9276.11503614173" y="-89.9047324913076" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[1..2];" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="a08aff48-d005-4d30-8495-541bb9038a09" type="Dynamo.Nodes.DSFunction" nickname="List.Transpose" x="9419.96567808463" y="-89.1745176218336" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.Transpose@var[]..[]" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="756ff5ae-7f33-435d-a511-8d0c374056e7" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="9273.64146355251" y="-4.05082751627054" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="b = {a[0]};" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="4c2a5a5c-31fc-4fbc-bc84-cb7582c1af6b" type="DSIronPythonNode.PythonNode" nickname="LowLevel Restrms Extruder" x="9706.87582664272" y="-308.465481137232" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

keyFloorList = IN[0]
restrmList = IN[1]
floorList = IN[2]


#to compute the lower lvl restrm spaces------------------------------
def restrmLowLvlExtruder(keyFloorList,restrmL,floorList):
	extruded = []
	p1		=	Point.ByCoordinates(0,0,0);
	p2		=	Point.ByCoordinates(0,0,100);
	vec		=	Vector.ByTwoPoints(p1,p2)
	for i in range(len(keyFloorList)):
		key1 = keyFloorList[i]
		floorL = floorList[i]
		rest1 = restrmL[i]
		extF=[]
		for j in range(len(key1)):
			key2 = key1[j]
			rest2 = rest1[j]
			floor = floorL[key2[0]]
			zVal = floor.Center().Z
			ext1 = Curve.ExtrudeAsSolid(rest2,vec,zVal)
			extF.append(ext1)
			#extF.append(ext2)
		extruded.append(extF)			
			
	return extruded
#--------------------------------------------------------------------
extF=[]
for i in range(len(restrmList)):
	restrmL = restrmList[i]
	ext = restrmLowLvlExtruder(keyFloorList,restrmL,floorList)
	extF.append(ext)

#Assign your output to the OUT variable
OUT =extF</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="aad2be8b-99c5-41f1-8069-657f1764bde3" type="DSIronPythonNode.PythonNode" nickname="Core Placer Points Strat 3" x="4526.12662283283" y="2170.84874363101" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="5">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import random
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

emptyBox = IN[0]
type     = IN[1]
inputLen = IN[2]
coreDim  = IN[3]
edgeList = IN[4]


#get the shorter dimension---------------------------------------------------------------
def getShorterDim(rec):
	width	=	rec.Width
	length	=	rec.Height
	points = 	rec.Points
	diagDist = Line.ByStartPointEndPoint(points[0],points[2]).Length
	if(width&lt;=length): 
		shortEdge	= width
		longEdge	= length
	else: 
		shortEdge 	= length
		longEdge  	= width
	return shortEdge,longEdge,diagDist
	#return longEdge,shortEdge
# END OF FUNCTION ------------------------------------------------------------------------


#makes the core rectangle based on number of req it has---------------------------------------------------------------------------------------
def makeCoreBox(rec,numCore,wid,ht,longEdge):
	coreList=[]
	cen = rec.Center()
	pts = rec.Points
	ptPlaceList = []
	#when just need to place one core
	if numCore ==1:
		cs = CoordinateSystem.ByOrigin(cen)
		coreRec= Rectangle.ByWidthHeight(cs,wid,ht)
		coreList.append(coreRec)
		ptPlaceList.append(cen)
	#when more than one core needs to be placed
	else:
		len1 = Line.ByStartPointEndPoint(pts[0],pts[1]).Length
		len2 = Line.ByStartPointEndPoint(pts[0],pts[3]).Length
		#find the longer edge and that line
		if len1 == longEdge:
			lin = Line.ByStartPointEndPoint(pts[0],pts[1])
		else:
			lin = Line.ByStartPointEndPoint(pts[0],pts[3])			
		linCen = lin.PointAtParameter(0.5)
		vec = Vector.ByTwoPoints(linCen,cen)
		linNew = lin.Translate(vec)
		#divide the line to get the points to place core		
		linNewLen = linNew.Length
		perDist = linNewLen/(numCore+1)
		
		#prepare the pointlist
		for i in range(numCore):
			pt = linNew.PointAtDistance((i+1)*perDist)
			ptPlaceList.append(pt)
	return ptPlaceList
#---------------------------------------------------------------------------------------------------------------------------------------------

# function which places core boxes into the empty boxes----------------------------------------------------------------------------------------
def getNumCores(boxList):		
	numCoresList=[]
	lenMeasure = inputLen
	wid = coreDim
	ht = coreDim
	for i in range(len(boxList)):
		rec = boxList[i]
		shortEdge = getShorterDim(rec)[0]
		longEdge = getShorterDim(rec)[1]
		diagDist = getShorterDim(rec)[2]
		if longEdge &gt; lenMeasure :
			numCore = int(math.ceil(longEdge/lenMeasure))	
		else :
			numCore=1
		numCoresList.append(numCore)
	return numCoresList
#----------------------------------------------------------------------------------------------------------------------------------------------




def placeCorePoints(boxList,edgeList):
	pointList=[]
	numCoreList = getNumCores(boxList)
	
	finCoreList=[]
	ptFinalList=[]
	for i in range(len(boxList)):
		edgeL = edgeList[i]
		recL = boxList[i]
		numCores = numCoreList[i]
		getCore = 0
		corePlaced =0
		coreList =[]
		count = 0
		while corePlaced &lt; numCores:
			#fill in 0 to initiate the coreList for 1st time
			if count == 0:
				for j in range(len(edgeL)):
					coreList.Add(0)				
			for j in range(len(edgeL)):
				corePlaced += 1
				if corePlaced &gt; numCores : break				
				coreList[j] += 1				
			count += 1
		finCoreList.Add(coreList)
		ptPlaceList = []
		for j in range(len(edgeL)):
			edge = edgeL[j]
			coresEdge = coreList[j]
			perDist = edge.Length/(coresEdge+1)	
			for k in range(coresEdge):
				if coresEdge == 1:
					pt = edge.PointAtParameter(random.uniform(0.2,0.8))
				else:					
					pt = edge.PointAtDistance((k+1)*perDist)
				ptPlaceList.append(pt)
		ptFinalList.Add(ptPlaceList)
			
	 	
	return ptFinalList





out = placeCorePoints(emptyBox,edgeList)
#Assign your output to the OUT variable
OUT = out</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="95b94dbb-a22e-4401-9cda-8f4e80c0f917" type="DSIronPythonNode.PythonNode" nickname="Service Core Components Strat 3" x="4808.07260581715" y="1911.27153585723" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="12">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import random
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

flr_WidthList		=	IN[0]
flr_HeightList		=	IN[1]
twr_BaseptList		=	IN[2]
num_passElev		=	IN[3][0]
num_servElev		=	IN[3][1]

passElev_Area		=	IN[4]
servElev_Area		=	IN[4]
tag					=	IN[5]
elevWidth			=	IN[6][0]
elevLength			=	IN[6][1]
restroomProp		=	IN[7]
techrmProp			=	IN[8]
liftLobbyWidth		=	IN[9]
corePtList			=	IN[10]
corDim				=	IN[11]





#compute service core width, length, and serviceCore====================================================================================================
def serviceCoreMaker(ptL):
	global area_banks, area_restroom,area_servmodule
	rd = random.uniform(0,1)
	#calc total area for service core for the tower
	serviceCore_Area 	= area_banks + area_restroom + area_servmodule;
	serviceCore_Area	= serviceCore_Area/len(ptL)
	area_banks			= area_banks/len(ptL)
	area_restroom		= area_restroom/len(ptL)
	area_servmodule		= area_servmodule/len(ptL)
	
	servCore_WidthL = []
	servCore_LengthL = []
	coreVerticesL = []
	b_FacL =[]
	serviceCore_RecL = []
	for i in range(len(ptL)):
		pt = ptL[i]			
		#calc aspect ratio of floor plate
		aspect_Ratio 		= 	flr_Width/flr_Height
		
		#adjust aspectratio
		if aspect_Ratio &lt; 0.65 : aspect_Ratio = 0.75
		if aspect_Ratio &gt; 1.3 : aspect_Ratio = 1.2
		#calc service core length and width
		if rd&gt;0.5:
			servCore_Length 	=	math.sqrt(serviceCore_Area/aspect_Ratio)
			servCore_Width		=	serviceCore_Area/servCore_Length	
		else:
			servCore_Width		=	math.sqrt(serviceCore_Area/aspect_Ratio)
			servCore_Length 	=	serviceCore_Area/servCore_Width	
		
	
		# get the coordinates of center pt
		x,y,z 					= 	pt.X,pt.Y,pt.Z	
		#make the service core rectangle object--------------------------------------------------------------------------------------------------------------1
		cs					= 	CoordinateSystem.ByOrigin(x,y,z)
		serviceCore_Rec 	= 	Rectangle.ByWidthHeight(cs,servCore_Width,servCore_Length)
		serviceCore_Rec 	=	orientFixNEW(serviceCore_Rec,twr_Basept,pt,servCore_Width,servCore_Length)
		
		
		
		coreVertices		=	serviceCore_Rec.Points
		servCore_WidthL.append(servCore_Width)
		servCore_LengthL.append(servCore_Length)
		coreVerticesL.append(coreVertices)
		serviceCore_RecL.append(serviceCore_Rec)
	#comput elev bank factor--------------------------------------------------------------------
	b_Fac				=	area_banks/serviceCore_Area
	#return serviceCore_Rec,b_Fac,coreVertices,area_banks,area_banks,area_servmodule
	return servCore_WidthL,servCore_LengthL,coreVerticesL,b_Fac,serviceCore_RecL



#function to make boxes based off of width, length and vertices===========================================================================================
def makeBox(widthL,lengthL,verticesL,factor,tag):
	new_RecL=[]
	other_RecL=[]
	for i in range(len(widthL)):
		width = widthL[i]
		length = lengthL[i]
		vertices = verticesL[i]
		
		#calculate the shorter of width or height of service core
		if ( tag == 0):
			if (width &lt; length):
				new_Length 		=	length
				new_Width		=	factor*width
				other_Length 	=	length
				other_Width		=	width - new_Width
				index			=	3		
			else:
				new_Width		=	width	
				new_Length		=	factor*length
				other_Width 	=	width
				other_Length	=	length - new_Length
				index			=	2
		else:
			if (width &gt; length):
				new_Length 		=	length
				new_Width		=	factor*width
				other_Length 	=	length
				other_Width		=	width - new_Width
				index			=	3		
			else:
				new_Width		=	width	
				new_Length		=	factor*length
				other_Width 	=	width
				other_Length	=	length - new_Length
				index			=	2		
	
		
		cs1					= 	CoordinateSystem.ByOrigin(vertices[0].X,vertices[0].Y,0)
		cs2					= 	CoordinateSystem.ByOrigin(vertices[index].X,vertices[index].Y,0)
		# to make the primary rectangle ----------------------------------------------------------------------	
		new_Rec 			= 	Rectangle.ByWidthHeight(cs1,new_Width,new_Length)	
		new_Vec				= 	Vector.ByTwoPoints(new_Rec.Points[0],vertices[0])
		new_Rec				=	Geometry.Translate(new_Rec, new_Vec)
		ptsnew_Rec			=	new_Rec.Points
		# to make the secondary rectangle ----------------------------------------------------------------------	
		other_Rec 			= 	Rectangle.ByWidthHeight(cs2,other_Width,other_Length)	
		other_Vec			= 	Vector.ByTwoPoints(other_Rec.Points[index],vertices[index])
		other_Rec			=	Geometry.Translate(other_Rec, other_Vec)
		ptsother_Rec		=	other_Rec.Points
		
		new_RecL.append(new_Rec)
		other_RecL.append(other_Rec)
	
	return [new_RecL,other_RecL]
#============================================================================================================================================================



#make post computations======================================================================================================================================
def coreConfigurator(b_Fac):
	#make the elevator bank rectangle object-----------------------------------------------------1	
	bank_RecL			=	makeBox(servCore_Width,servCore_Length,coreVertices,b_Fac,tag)
	bank_RecLNew = []
	for i in range(len(bank_RecL)):
		bank_Rec = 	bank_RecL[i]
		widtry1				=	bank_Rec[0].Width
		lentry1				=	bank_Rec[0].Height
				
		# code to readjust the bank rectangle piece based on the final tech rooms and restroom blocks
		if ( widtry1&lt;lentry1):
			shortEdge		=	widtry1
			marked			=	0	
		else:
			shortEdge		=	lentry1
			marked			=	1
				
		if (elevWidth&lt;elevLength):elevEdge = elevWidth
		else:elevEdge =	elevLength			
		numE				=	int(shortEdge / elevEdge)
		numE				+=	1
			
		newDim				=	numE*elevEdge
		if ( marked ==0): ratio	= widtry1/newDim
		else: ratio	= lentry1/newDim
		b_Fac				=	ratio*b_Fac
		#bank_RecL			=	makeBox(servCore_Width,servCore_Length,coreVertices,b_Fac,tag)
		
	return bank_RecL
	#-------------------------------------------------------------------------------------------------
#============================================================================================================================================================
#to fix the orientation of the serviceCores-----------------------------------------------------------
def orientFixNEW(servCore,twr_Basept,crPt,wid,ht):
	vecX = Vector.XAxis()
	vecY = Vector.YAxis()
	
	vecMain = Vector.ByTwoPoints(crPt,twr_Basept)
	vecMainNormal = vecMain.Normalized()
	
	valX = vecMainNormal.X * vecX.X
	valY = vecMainNormal.Y * vecY.Y
	
	if valX &lt; 0:
		vecX = vecX.Reverse()
		pass
	if valY &lt; 0:
		vecY = vecY.Reverse()
		pass

		
	angX = Vector.AngleBetween(vecMain,vecX) 
	angY = Vector.AngleBetween(vecMain,vecY)
	if angX &lt;= 80 and angX &gt;= 0: # 50 &amp; 10 .... 100 &amp; 10
		vecMain = vecX.Scale((wid/2)+(corDim/2))
		#vecMain = vecX.Scale(wid/2)		
		servCore = servCore.Translate(vecMain)
	if angY &lt;= 80 and angY &gt;= 0:
		vecMain = vecY.Scale((ht/2)+(corDim/2))
		#vecMain = vecY.Scale(ht/2)
		servCore = servCore.Translate(vecMain)
	
	return servCore
#-----------------------------------------------------------------------------------------------------


#iterate through all the blocks and output lists for each---------------------------------------------
outList=[]
bankRecList= []
otherRecList=[]
areaRestrmList=[]
areaServModList=[]
servCoreList=[]

perc = 1.1

for i in range(len(twr_BaseptList)):

	flr_Width  = flr_WidthList[i]
	flr_Height = flr_HeightList[i]
	twr_Basept = twr_BaseptList[i]
	corePts	   = corePtList[i]
	
	#globals var, computer area banks, area restrm, area techrms--------------------------------------------------------------------------------------------
	cirProp = liftLobbyWidth/1.5
	
	area_banks			= servElev_Area*num_servElev[i]/perc + passElev_Area*num_passElev[i]/perc
	area_banks			+=cirProp*area_banks # added the circulation area
	area_restroom 		= restroomProp*area_banks								
	area_servmodule 	= techrmProp*area_banks
	
	
	#OUTPUT VALUES-------------------------------------------------------
	vals 				= 	serviceCoreMaker(corePts)
	servCore_Width		=	vals[0]
	servCore_Length		=	vals[1]
	coreVertices		=	vals[2]
	b_Fac				=	vals[3]
	serviceCore_Rec		=	vals[4]
	bank_Rec 			= 	coreConfigurator(b_Fac)	
	
	bankRecList.append(bank_Rec[0])
	otherRecList.append(bank_Rec[1])
	areaRestrmList.append(area_restroom)
	areaServModList.append(area_servmodule)
	servCoreList.append(serviceCore_Rec)
	
	

out = bankRecList,otherRecList,areaRestrmList,areaServModList,servCoreList

#Assign your output to the OUT variable
OUT = out
</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="bbc28dfc-3a25-48c9-a7ce-c135e908e8cc" type="DSIronPythonNode.PythonNode" nickname="Edge Picker Strat3" x="4310.25229095292" y="2275.35238814062" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="4">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

emptyBox = IN[0]
type = IN[1]
inputLen = IN[2]
coreDim = IN[3]

#finds number of closest rectangle pieces to find---------------------------------------------------------------------------------------------
def adjacencyList(type):
	adjList = []
	if type ==1: adjList = [0]
	if type ==2: adjList = [1,1]
	if type ==3: adjList = [1,2,1]
	if type ==4: adjList = [2,2,2,2]	
	return adjList
#---------------------------------------------------------------------------------------------------------------------------------------------

#finds the closest point from a list of points------------------------------------------------------------------------------------------------
def closestPoint(ptA,ptBList):
	distList=[]
	for i in range(len(ptBList)):
		ptB = ptBList[i]
		dist = ptA.DistanceTo(ptB)
		distList.append(dist)

	sortDistList = distList[:]
	sortDistList.sort()
	
	for i in range(len(sortDistList)):
		for j in range(len(sortDistList)):
			if sortDistList[0] == distList[j]: closePtList = ptBList[j]
		break
	return closePtList
#---------------------------------------------------------------------------------------------------------------------------------------------
#to convert curves to lines--------------------------------------------------------------------------------------------------------------------
def convToLine(edgeList):
	lineList=[]
	for i in range(len(edgeList)):
		lineL=[]
		for j in range(len(edgeList[i])):
			lineL.Add(Line.ByStartPointEndPoint(edgeList[i][j].StartPoint,edgeList[i][j].EndPoint))
		lineList.Add(lineL)
	return lineList
#---------------------------------------------------------------------------------------------------------------------------------------------

#find the common edges between two boxes------------------------------------------------------------------------------------------------------
def findCloseRects(boxList,type):
	indexList = []
	adjList = adjacencyList(type)
	distList=[]
	sortDistList = []
	for i in range(len(boxList)):
		rec = boxList[i]
		recCen = rec.Center()
		distL =[]
		sortL =[]
		indexL=[]		
		for j in range(len(boxList)):
			rec2 = boxList[j]
			recCen2 = rec2.Center()
			dist = recCen.DistanceTo(recCen2)
			#done to make sure further away rectangles dont counted as being close
			v1 = Vector.ByTwoPoints(recCen,recCen2)
			if v1.Length != 0:
				str = "1st enetered"
				vangX = v1.AngleBetween(Vector.XAxis())
				vangY = v1.AngleBetween(Vector.YAxis())
				if type == 4:				
					if int(vangX) == 0 or int(vangY) == 0:
						str ="2nd entered"
						dist = 900000000000000000000000000	
				if type == 5:
					if int(vangX) &lt;30 or int(vangY) &lt;30:
						str ="2nd entered"
						dist = 1		
			
			distL.append(dist)
			
		sortList = distL[:]
		sortList.sort()
		sortL.Add(sortList)
		sortDistList.Add(sortList)
		distList.Add(distL)
		
	indexList=[]
	for i in range(len(distList)):
		distL = distList[i]
		sortL = sortDistList[i]
		numAdj = adjList[i]
		indexL=[]
		for k in range(numAdj):			
			for j in range(len(distL)):			
				if sortL[k+1] == distL[j]:
					index = j
					indexL.append(index)
					#break
		indexList.append(indexL)
	
	return indexList
#---------------------------------------------------------------------------------------------------------------------------------------------



#finds common edges between neighboring rect pieces---------------------------------------------------------------------------------------------
def findCommonEdges(boxList,type):
	TAG = 0
	edgeList = []
	closePtList = []
	indexList = findCloseRects(boxList,type)
	for i in range(len(boxList)):
		rec = boxList[i]
		recCen = rec.Center()
		recPts = rec.Points
		indexL = indexList[i]
		edgeL =[]
		closeL =[]
		for j in range(len(indexL)):
			ind = indexL[j]
			recSide = boxList[ind]
			recSideCen = recSide.Center()
			lin = Line.ByStartPointEndPoint(recCen,recSideCen)
			midPt = lin.PointAtParameter(0.5)
			recSidePts = recSide.Points
			closePt1 = closestPoint(midPt,recSidePts)
			closePt2 = closestPoint(midPt,recPts)
			closePt3 = closestPoint(closePt1,recPts)
			if closePt3 == closePt2 : 
				edge = Line.ByStartPointEndPoint(closePt1,closePt2)
				edge = edgeRedo(rec,edge)				
			else : 
				edge = Line.ByStartPointEndPoint(closePt3,closePt2)
			edgeL.Add(edge)
			closeL.Add([closePt1,closePt2])
		closePtList.Add(closeL)
		edgeL = edgeCleaner(edgeL)		
		edgeList.Add(edgeL)
		
	return edgeList
#----------------------------------------------------------------------------------------------------------------------------------------------

#adds more edges to the list which are not common----------------------------------------------------------------------------------------------
def addEdge(boxList,type):
	finalEdgeList = []
	commonEdgeList = findCommonEdges(emptyBox,type)
	
	for i in range(len(boxList)):
		rec = boxList[i]
		recPts = rec.Points
		
		l1 = Line.ByStartPointEndPoint(recPts[0],recPts[1])
		l2 = Line.ByStartPointEndPoint(recPts[1],recPts[2])
		l3 = Line.ByStartPointEndPoint(recPts[2],recPts[3])
		l4 = Line.ByStartPointEndPoint(recPts[3],recPts[0])
		
		l1Mid = l1.PointAtParameter(0.5)
		l2Mid = l2.PointAtParameter(0.5)
		l3Mid = l3.PointAtParameter(0.5)
		l4Mid = l4.PointAtParameter(0.5)
		
		commonEdgeL = commonEdgeList[i]
		copiedEdgesL = commonEdgeL[:]
		if len(commonEdgeL) &gt; 1: 
			finalEdgeList.append(copiedEdgesL)	
			continue		
		for j in range(len(commonEdgeL)):
			edge = commonEdgeL[j]
			edgeMid = edge.PointAtParameter(0.5)
			if edgeMid.X == l1Mid.X and edgeMid.Y == l1Mid.Y :
				copiedEdgesL.append(l3)
				break
				pass
			if edgeMid.X == l2Mid.X and edgeMid.Y == l2Mid.Y :
				copiedEdgesL.append(l4)
				break
				pass
			if edgeMid.X == l3Mid.X and edgeMid.Y == l3Mid.Y :
				copiedEdgesL.append(l1)
				break
				pass
			if edgeMid.X == l4Mid.X and edgeMid.Y == l4Mid.Y :
				copiedEdgesL.append(l2)
				break
				pass
		finalEdgeList.append(copiedEdgesL)	
	
	return finalEdgeList
#----------------------------------------------------------------------------------------------------------------------------------------------

#to clean duplicate items in a list------------------------------------------------------------------------------------------------------------
def edgeCleaner(edgeList):
	copEdgeList = edgeList[:]
	if len(edgeList) &gt; 1:
		for i in range(len(edgeList)-1):		
			edge1 = edgeList[i]
			edge2 = edgeList[i+1]			
			if edge1.PointAtParameter(0.5) == edge2.PointAtParameter(0.5) and edge1.Length == edge2.Length : 
				del copEdgeList[i+1]		
	return copEdgeList
#----------------------------------------------------------------------------------------------------------------------------------------------

#to compute the exact edge on the rec which corresponds to the common intersected edge found---------------------------------------------------
def edgeRedo(rec,edge):
	finalEdgeList = []
	recVecList = []
	recLineList = []
	vecEdge = Vector.ByTwoPoints(edge.StartPoint,edge.EndPoint)
	recPts  = rec.Points
	
	midEdge = edge.PointAtParameter(0.5)
	
	recVecList.Add(Vector.ByTwoPoints(recPts[0],recPts[1]))
	recVecList.Add(Vector.ByTwoPoints(recPts[1],recPts[2]))
	recVecList.Add(Vector.ByTwoPoints(recPts[2],recPts[3]))
	recVecList.Add(Vector.ByTwoPoints(recPts[3],recPts[0]))
	
	recLineList.append(Line.ByStartPointEndPoint(recPts[0],recPts[1]))
	recLineList.append(Line.ByStartPointEndPoint(recPts[1],recPts[2]))
	recLineList.append(Line.ByStartPointEndPoint(recPts[2],recPts[3]))
	recLineList.append(Line.ByStartPointEndPoint(recPts[3],recPts[0]))
	
	newLineList=[]
	distList =[]
	for i in range(len(recVecList)):
		recVec = recVecList[i]
		ang = Vector.AngleBetween(vecEdge,recVec)
		finalEdgeList.append(ang)
		if int(ang) == 0 :
			mid = recLineList[i].PointAtParameter(0.5)
			dist = midEdge.DistanceTo(mid)
			distList.Add(dist)
			newLineList.Add(recLineList[i])
			
	checkDist = 10000000000000000000000	
	for i in range(len(newLineList)):
		if distList[i] &lt; checkDist:
			index = i
			checkDist = distList[i]			
	return newLineList[index]
#----------------------------------------------------------------------------------------------------------------------------------------------



out = addEdge(emptyBox,type)
#Assign your output to the OUT variable
OUT = out</Script>
    </DSIronPythonNode.PythonNode>
    <DSCore.File.Filename guid="9fa3bf57-d086-4243-8d93-07743788215c" type="DSCore.File.Filename" nickname="File Path" x="-3742.40382860948" y="2934.52638591292" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.String>C:\Users\Colin\Documents\GitHub\Akaba\services\generators\hoover\3-4Floor-L_2.stl</System.String>
    </DSCore.File.Filename>
    <DSCore.File.FileObject guid="98d8b33d-24f5-4dbc-a08a-7223f00f876f" type="DSCore.File.FileObject" nickname="File.FromPath" x="-3391.99906073049" y="2872.38647996596" isVisible="true" isUpstreamVisible="true" lacing="Disabled" />
    <Dynamo.Nodes.DSFunction guid="2f01519a-2961-49f2-bbe3-5851e41c3a3b" type="Dynamo.Nodes.DSFunction" nickname="File.ReadText" x="-3253.93465643835" y="2871.31146743199" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.IO.File.ReadText@var" />
    <Dynamo.Nodes.DoubleInput guid="aa5a9f67-df7b-44c6-8baa-a581ef4dcd54" type="Dynamo.Nodes.DoubleInput" nickname="Level" x="-2212.82574808958" y="2877.53625705111" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double value="1" />
    </Dynamo.Nodes.DoubleInput>
    <DSCoreNodesUI.NumberRange guid="d9e83557-2578-4517-afba-7e2644d31b07" type="DSCoreNodesUI.NumberRange" nickname="Number Range" x="-1578.56563421563" y="2590.97742122584" isVisible="true" isUpstreamVisible="true" lacing="Longest" />
    <DSIronPythonNode.PythonNode guid="e4948c89-2144-49df-9f65-6b94b0f9f835" type="DSIronPythonNode.PythonNode" nickname="Shell Type" x="-338.680554236693" y="2906.29210699107" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN


a = IN[0][-5]


a = int(a)


#Assign your output to the OUT variable
OUT = a</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction guid="9f1260d0-64a1-4f4f-94e3-7a48ff52a6f5" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="-253.60366161608" y="2485.09434958237" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <DSIronPythonNode.PythonNode guid="60859769-181d-4db8-9775-b6ad7f1734f6" type="DSIronPythonNode.PythonNode" nickname="Box + Floor Maker " x="24.363041169499" y="2524.23598520493" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="4">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

polygonList = IN[0]
type = IN[1]
heightList = IN[2]
iter = IN[3]

srfAreaList=[]
selectedpolyList=[]
zHeightList=[]


#computes for all except type 4-----------------------------------------------------------------------------------------------
def boxFloorMaker4():	
	newpolygonList=[]
	poly1st = polygonList[0]
	srf0 = Surface.ByPatch(poly1st)
	area1st = srf0.Area
	# compute floor areas	
	for i in range(len(polygonList)):
		
		polygon = polygonList[i]
		srf = Surface.ByPatch(polygon)		
		area  = srf.Area
		if math.pow((area1st - area),2) &lt; 5 :continue 
		srfAreaList.append(area)
		newpolygonList.append(polygon)
		
	# select floors where area changes
	for i in range(len(srfAreaList)-1):
		areaCurrent = srfAreaList[i]
		
		areaNext = srfAreaList[i+1]
		areaSubtract = areaNext-areaCurrent
		if math.pow(areaSubtract,2) &lt; 5:
			pass
		else:
			selectedpolyList.append(newpolygonList[i])	
	selectedpolyList.append(newpolygonList[-1])
	
	#translate the selected floors to ground lvl
	newPolyList=[]
	zHeightList=[]
	
	for i in range(len(selectedpolyList)):
		selPolygon = selectedpolyList[i]
		pCenter = selPolygon.Center()
		pOrigin = Point.ByCoordinates(pCenter.X,pCenter.Y,0)		 
		vec = Vector.ByTwoPoints(pCenter,pOrigin)
		newPoly = selPolygon.Translate(vec)
					
		newPolyList.append(newPoly)
		zHeightList.append(pCenter.Z)	
		
	#trim the floors polygons to make individual blocks
	trimmedSrfList=[]
	perimeterList = []
	for i in range(len(newPolyList)-1):
		polyA = newPolyList[i]
		polyB = newPolyList[i+1]
		polyBSolid = polyB.ExtrudeAsSolid(Vector.ZAxis(),5)
		polyASrf = Surface.ByPatch(polyA)
		trimmedSurf = Surface.SubtractFrom(polyASrf,polyBSolid)
		trimmedSrfList.append(trimmedSurf)
		pass	
	trimmedSrfList.append(Surface.ByPatch(newPolyList[-1]))
	
	#just for type4
	polyBSolid = poly1st.ExtrudeAsSolid(Vector.ZAxis(),-5)
	polyASrf = trimmedSrfList[0][0]
	trimmedSurf = Surface.SubtractFrom(polyASrf,polyBSolid)
	trimmedSrfList[0] = trimmedSurf	
	
	newtrimmedList=[]
	newperimeterList = []
	
	
	# flatten the list
	for i in range(len(trimmedSrfList)):
		crv = trimmedSrfList[i]
		try :
			for j in range(len(crv)):
				newtrimmedList.append(crv[j])
				perim = crv[j].Perimeter
				newperimeterList.append(perim)
		except:
			newtrimmedList.append(crv)
			perim = crv.Perimeter
			newperimeterList.append(perim)
			
	#make floor curves for the individual blocks		
	trimmedCurvesList=[]
	ptList=[]
	rectangleList = []
	testL=[]
	for i in range(len(newtrimmedList)):
		srf = newtrimmedList[i]
		crvs = srf.PerimeterCurves()
		crvs = PolyCurve.ByJoinedCurves(crvs)
		testL.append(crvs)		

		#IF ERROR TRIGGER THESE DIST VALUES, BOTH WORKS
		dist= crvs.Length/4
		#dist= float(newperimeterList[i]/4)
		
		#pt1 = crvs.PointAtDistance(dist)
		pt2 = crvs.PointAtDistance(dist*2)
		pt4 = crvs.PointAtDistance(dist*3.999)
		pt1 = Point.ByCoordinates(pt2.X,pt4.Y)
		pt3 = Point.ByCoordinates(pt4.X,pt2.Y)
		#pt3 = crvs.PointAtDistance(dist*3)
		
		# make rectangles for the floor curves
		ptList.append((pt1,pt2,pt3,pt4))
		"""
		if type == 3:
			rec = Rectangle.ByCornerPoints(pt3,pt4,pt1,pt2)
		else:
		"""
		rec = Rectangle.ByCornerPoints(pt1,pt2,pt3,pt4)
		rectangleList.append(rec)
		trimmedCurvesList.append(crvs)
		
	if type == 3:
		tmp = rectangleList[1]
		tmp1 = zHeightList[1]
		zHeightList[1] = zHeightList[2]
		zHeightList[2] = tmp1
		rectangleList[1] = rectangleList[2]
		rectangleList[2] = tmp
	
	# make floor curves as rectangle objects
	newRecList = []
	boxRecList = []
	for i in range(len(rectangleList)):
		rec = rectangleList[i]
		boxRecList.append(rec)
		zHeight = zHeightList[i]
		newRecL=[]
		for j in range(len(heightList)):
			
			heightVal =  heightList[j]
			if zHeight &lt; heightVal : break		 
			vec = Vector.ZAxis()
			newRecs = rec.Translate(vec,heightVal)
			newRecL.append(newRecs)
		newRecList.append(newRecL)
	#return testL
	return boxRecList,newRecList
#-------------------------------------------------------------------------------------------------------------------------------------------------------



	
	
	

	
	
#computes for all except type 4-----------------------------------------------------------------------------------------------
def boxFloorMakerAll():	
	# compute floor areas	
	for i in range(len(polygonList)):
		polygon = polygonList[i]
		srf = Surface.ByPatch(polygon)
		area  = srf.Area
		srfAreaList.append(area)
		
	# select floors where area changes
	for i in range(len(srfAreaList)-1):
		areaCurrent = srfAreaList[i]
		areaNext = srfAreaList[i+1]
		areaSubtract = areaNext-areaCurrent
		if math.pow(areaSubtract,2) &lt; 5:
			pass
		else:
			selectedpolyList.append(polygonList[i])	
	selectedpolyList.append(polygonList[-1])
	
	#translate the selected floors to ground lvl
	newPolyList=[]
	zHeightList=[]
	for i in range(len(selectedpolyList)):
		selPolygon = selectedpolyList[i]
		pCenter = selPolygon.Center()
		pOrigin = Point.ByCoordinates(pCenter.X,pCenter.Y,0)		 
		vec = Vector.ByTwoPoints(pCenter,pOrigin)
		newPoly = selPolygon.Translate(vec)		
		newPolyList.append(newPoly)
		zHeightList.append(pCenter.Z)	
		
	#trim the floors polygons to make individual blocks
	trimmedSrfList=[]
	perimeterList = []
	for i in range(len(newPolyList)-1):
		polyA = newPolyList[i]
		polyB = newPolyList[i+1]
		polyBSolid = polyB.ExtrudeAsSolid(Vector.ZAxis(),5)
		polyASrf = Surface.ByPatch(polyA)
		trimmedSurf = Surface.SubtractFrom(polyASrf,polyBSolid)
		trimmedSrfList.append(trimmedSurf)
		pass	
	trimmedSrfList.append(Surface.ByPatch(newPolyList[-1]))
		
	newtrimmedList=[]
	newperimeterList = []
	
	# flatten the list
	for i in range(len(trimmedSrfList)):
		crv = trimmedSrfList[i]
		try :
			for j in range(len(crv)):
				newtrimmedList.append(crv[j])
				perim = crv[j].Perimeter
				newperimeterList.append(perim)
		except:
			newtrimmedList.append(crv)
			perim = crv.Perimeter
			newperimeterList.append(perim)
			
	#make floor curves for the individual blocks		
	trimmedCurvesList=[]
	ptList=[]
	rectangleList = []
	for i in range(len(newtrimmedList)):
		srf = newtrimmedList[i]
		crvs = srf.PerimeterCurves()
		crvs = PolyCurve.ByJoinedCurves(crvs)
	
		#IF ERROR TRIGGER THESE DIST VALUES, BOTH WORKS
		#dist= crvs.Length/4
		dist= float(newperimeterList[i]/4)
		
		#pt1 = crvs.PointAtDistance(dist)
		pt2 = crvs.PointAtDistance(dist*0)
		pt4 = crvs.PointAtDistance(dist*2)
		pt1 = Point.ByCoordinates(pt2.X,pt4.Y)
		pt3 = Point.ByCoordinates(pt4.X,pt2.Y)
		#pt3 = crvs.PointAtDistance(dist*3)
		
		# make rectangles for the floor curves
		ptList.append((pt1,pt2,pt3,pt4))
		"""
		if type == 3:
			rec = Rectangle.ByCornerPoints(pt3,pt4,pt1,pt2)
		else:
		"""
		rec = Rectangle.ByCornerPoints(pt1,pt2,pt3,pt4)
		rectangleList.append(rec)
		trimmedCurvesList.append(crvs)
		
	if type == 3:
		tmp = rectangleList[1]
		tmp1 = zHeightList[1]
		zHeightList[1] = zHeightList[2]
		zHeightList[2] = tmp1
		rectangleList[1] = rectangleList[2]
		rectangleList[2] = tmp
	
	# make floor curves as rectangle objects
	newRecList = []
	boxRecList = []
	for i in range(len(rectangleList)):
		rec = rectangleList[i]
		boxRecList.append(rec)
		zHeight = zHeightList[i]
		newRecL=[]
		for j in range(len(heightList)):
			
			heightVal =  heightList[j]
			if zHeight &lt; heightVal : break		 
			vec = Vector.ZAxis()
			newRecs = rec.Translate(vec,heightVal)
			newRecL.append(newRecs)
		newRecList.append(newRecL)
	
	return boxRecList,newRecList
#-------------------------------------------------------------------------------------------------------------------------------------------------------

# type 4 is O SHELL, so needs different treatment

if type == 4:
	out =boxFloorMaker4()
else :	
	out = boxFloorMakerAll()
	
			
	
	
	
	
#Assign your output to the OUT variable
#OUT = newPolyList,trimmedSrfList,zHeightList,newtrimmedList,newRecList,ptList
OUT = out</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="50e5733f-1184-4640-955f-b48ab15aa79f" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Floor Curves" x="235.63885139336" y="2576.88839211079" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[1];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="973955fd-68a4-4aa7-9b4b-2014274f9d88" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Box  Low Level" x="232.263928005298" y="2476.29880154953" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="777be676-85a3-40ea-9b51-046b82676151" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="BoxMaker" x="1741.14097504234" y="2764.69146403951" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="boxMaker;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="2546f451-8d99-4ff1-b0c3-bd4f1007a246" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Floor Maker" x="1732.20685209156" y="1367.82320490925" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="floorMaker;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="2dd3181d-7291-4edf-8068-4a3192c6627d" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Shell Type" x="1753.08358608293" y="2885.33248555503" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="type;" ShouldFocus="false" />
    <DSCoreNodesUI.Input.DoubleSlider guid="d96a4561-f794-44fe-917c-550f6da309ca" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Random Generator" x="-548.692887761989" y="2653.49252734573" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>37.8</System.Double>
      <Range min="0" max="100" step="0.1" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSIronPythonNode.PythonNode guid="b76d38ae-2dbc-4ea0-af12-a1a6424589c0" type="DSIronPythonNode.PythonNode" nickname="Random Strategies" x="5574.44283588001" y="2250.69841259446" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="4">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import random
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN


strat1 = IN[0]
strat2 = IN[1]
strat3 = IN[2]

# selects randomly any of the input strategies
randInp = random.randint(1,15)
if randInp &lt;= int(7) : 
	out = strat1
	strat = "Strategy 1"
elif randInp &gt; 7 and randInp &lt;= 10  : 
	out = strat2
	strat = "Strategy 2"
else : 
	out = strat3
	strat = "Strategy 3"
	


#Assign your output to the OUT variable
OUT = out,strat</Script>
    </DSIronPythonNode.PythonNode>
    <DSCoreNodesUI.Input.IntegerSlider guid="6ce0235a-0a09-44d5-afd7-0966ddc3dffc" type="DSCoreNodesUI.Input.IntegerSlider" nickname="RandomGenerator" x="2504.21696540366" y="2034.5439422303" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Int32>43</System.Int32>
      <Range min="0" max="100" step="1" />
    </DSCoreNodesUI.Input.IntegerSlider>
    <Dynamo.Nodes.CodeBlockNodeModel guid="7feba069-bf63-4679-ae86-ae270402c284" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="strategyUsed" x="8337.84538637855" y="2618.80359863378" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="A[1];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="a8a06083-aca9-4473-be7c-7872ba229af6" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="5600.66003306454" y="2410.70983168544" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="62fb154f-41e3-4bf0-b8f8-248b2847d0de" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="5620.45281235708" y="2165.08764708814" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="A=2;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="e371a115-fc90-4303-a97b-9585167c5739" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="9278.00441683807" y="86.4751138249135" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Vector.ZAxis();&#xA;h=100;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="0c658d97-adad-4dc8-8fda-7950196d433d" type="Dynamo.Nodes.DSFunction" nickname="FullServiceCoreBlock Extruded" x="9711.42891849391" y="237.398579382619" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Curve.ExtrudeAsSolid@Autodesk.DesignScript.Geometry.Vector,double">
      <PortInfo index="2" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.CodeBlockNodeModel guid="96e38089-201e-4d9d-bdcc-0706d6f6b5c9" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Height zVal" x="9711.94401616609" y="153.4235630761" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[1];" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="8cb84777-6039-49fe-9589-d4b0c99b80ee" type="Dynamo.Nodes.DSFunction" nickname="Face.Vertices" x="9996.54957187731" y="-147.38085314702" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Face.Vertices" />
    <DSIronPythonNode.PythonNode guid="e9d8df26-da71-43c3-9be7-b3c58d84410a" type="DSIronPythonNode.PythonNode" nickname="All Points " x="10514.5643126722" y="-158.769369914298" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

vertexList = IN[0]
tupleList = []
for i in range(len(vertexList)):
	ver = vertexList[i]
	for j in range(len(ver)):
		verO = ver[j]
		for k in range(len(verO)):
			verN = verO[k]
			for l in range(len(verN)):
				verM = verN[l]
				for m in range(len(verM)):				
					tup = (verM[m].PointGeometry.X,verM[m].PointGeometry.Y,verM[m].PointGeometry.Z)
					tupleList.append(tup)


		


#Assign your output to the OUT variable
OUT = tupleList</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="5e2453e0-6fa3-431f-8bc2-6af12cd06e47" type="DSIronPythonNode.PythonNode" nickname="Two Diagonal Point Finder" x="10512.0528165813" y="-74.3834421482583" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

vertexList = IN[0]
tupleList = []
for i in range(len(vertexList)):
	ver = vertexList[i]
	for j in range(len(ver)):
		verO = ver[j]
		for k in range(len(verO)):
			verN = verO[k]
			for l in range(len(verN)):
				verM = verN[l]				
				tup = (verM[0].PointGeometry.X,verM[0].PointGeometry.Y,verM[0].PointGeometry.Z)
				tupleList.append(tup)
				tup = (verM[7].PointGeometry.X,verM[7].PointGeometry.Y,verM[7].PointGeometry.Z)
				tupleList.append(tup)


		


#Assign your output to the OUT variable
OUT = tupleList</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="1a2a68c8-0533-4914-bdd3-367f1a306821" type="DSIronPythonNode.PythonNode" nickname="Point Creator" x="10750.1197793836" y="-129.477848379354" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

units = IN[0]
ptList = []
for i in range(len(units)):
	cod = units[i]
	pt = Point.ByCoordinates(cod[0],cod[1],cod[2])
	ptList.append(pt)

#Assign your output to the OUT variable
OUT = ptList</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction guid="a804ffd8-8608-4ea5-8562-3962321c1018" type="Dynamo.Nodes.DSFunction" nickname="Edge.CurveGeometry" x="10511.2271382934" y="39.2600542629576" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Edge.CurveGeometry" />
    <DSIronPythonNode.PythonNode guid="bc49473e-8dc9-4626-a370-0c259a1dc114" type="DSIronPythonNode.PythonNode" nickname="All Points " x="10510.1824717495" y="138.928455941423" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

vertexList = IN[0]
tupleList = []
for i in range(len(vertexList)):
	ver = vertexList[i]
	for j in range(len(ver)):
		verM = ver[j]
		for m in range(len(verM)):							
			tup = (verM[m].PointGeometry.X,verM[m].PointGeometry.Y,verM[m].PointGeometry.Z)
			tupleList.append(tup)


		


#Assign your output to the OUT variable
OUT = tupleList</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="44784fc5-fb21-4e94-a832-f79bffe92063" type="DSIronPythonNode.PythonNode" nickname="Two Diagonal Point Finder" x="10508.9964467769" y="225.90733637742" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

vertexList = IN[0]
tupleList = []
for i in range(len(vertexList)):
	ver = vertexList[i]
	for j in range(len(ver)):
		verM = ver[j]
		for k in range(len(verM)):						
			tup = (verM[0].PointGeometry.X,verM[0].PointGeometry.Y,verM[0].PointGeometry.Z)
			tupleList.append(tup)
			tup = (verM[7].PointGeometry.X,verM[7].PointGeometry.Y,verM[7].PointGeometry.Z)
			tupleList.append(tup)


		


#Assign your output to the OUT variable
OUT = tupleList</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="a3c19f8c-6b06-4a37-b22e-fda09454c617" type="DSIronPythonNode.PythonNode" nickname="Point Creator" x="10746.2999385368" y="228.334050212386" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

units = IN[0]
ptList = []
for i in range(len(units)):
	cod = units[i]
	pt = Point.ByCoordinates(cod[0],cod[1],cod[2])
	ptList.append(pt)

#Assign your output to the OUT variable
OUT = ptList</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="d01dc599-e71e-4634-8187-68a1c9ef9a0c" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="9712.5822960271" y="75.0605466687534" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="b21d6ee7-977d-44bf-8274-d0ce72ede0a8" type="DSIronPythonNode.PythonNode" nickname="Key Floorplates Finder" x="9291.4485171866" y="183.79635802376" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

floorList = IN[0]
keyFloorList = IN[1]
elevatorBanksList = IN[2]

#given an input elevator lists it will return the bouding rectangle volume-------------------------------------------------------------------------------
def boudingRecMaker(elevList):
	boundingBox = BoundingBox.ByGeometry(elevList)
	cuboid = boundingBox.ToCuboid()
	cubLines = cuboid.Edges
	
	p1 = cubLines[0].StartVertex.PointGeometry;
	p2 = cubLines[0].EndVertex.PointGeometry;
	p3 = cubLines[2].StartVertex.PointGeometry;
	p4 = cubLines[2].EndVertex.PointGeometry;
	
	boundingRec = Rectangle.ByCornerPoints(p1,p2,p3,p4)
	
	return boundingRec
#--------------------------------------------------------------------------------------------------------------------------------------------------------

# places the bounding boxes at the selected elev banks dropped-------------------------------------------------------------------------------------------
def restroomPlacer():
	restRmBlocks = []
	translatedElevListFinal = translateElevators(elevatorBanksList,floorList,keyFloorList)
	for i in range(len(translatedElevListFinal)):
		rest1 = []
		elev1 = translatedElevListFinal[i]
		for j in range(len(elev1)):	
			rest2 =[]		
			elev2 = elev1[j]
			for k in range(len(elev2)):
				if k == 0 : continue
				elev3 = elev2[k]
				boundingRestrms = boudingRecMaker(elev3)
				area = boundingRestrms.Width*boundingRestrms.Height
				if area &lt; 2: continue
				rest2.append(boundingRestrms)
			rest1.append(rest2)
		restRmBlocks.append(rest1)	
	return restRmBlocks,translatedElevListFinal
#--------------------------------------------------------------------------------------------------------------------------------------------------------





#function to translate the elev banks to the key floors plates in sequence--------------------------------
def translateElevators(elevatorBanksList,floorList,keyFloorList):
	translatedElevListFinal = []
	floorSelectedListFinal=[]
	placeforRestroomList =[]
	
	p1		=	Point.ByCoordinates(0,0,0);
	p2		=	Point.ByCoordinates(0,0,100);
	vec1		=	Vector.ByTwoPoints(p1,p2)
	
	for i in range(len(elevatorBanksList)):	
		baseFloor = floorList[i][0]
		basePt = baseFloor.Center()	
		floorL = floorList[i]
		keyFloorL = keyFloorList[i]
		floorSelectedList=[]
		translatedElevList = []
		elevatorBanksL = elevatorBanksList[i]
		for j in range(len(elevatorBanksL)):
			floorSelectedL=[]
			translatedElevL=[]
			keys = keyFloorL[j]
			keys.reverse()
			elevatorBanks = elevatorBanksL[j]
			for k in range(len(elevatorBanks)):				
				elevBank = elevatorBanks[k]
				index = keys[k]
				floor = floorL[index]
				zPt = floor.Center()
				vec = Vector.ByTwoPoints(basePt,zPt)
				elevL=[]
				for l in range(len(elevBank)):
					elev = elevBank[l]
					elevBankNew = elev.Translate(vec)	
					elevL.append(elevBankNew)
				translatedElevL.append(elevL)
				floorSelectedL.append(floor)
			translatedElevList.append(translatedElevL)
			floorSelectedList.append(floorSelectedL)
		translatedElevListFinal.append(translatedElevList)
		floorSelectedListFinal.append(floorSelectedList)	
	return translatedElevListFinal
#---------------------------------------------------------------------------------------------------------



#Assign your output to the OUT variable
OUT = restroomPlacer()</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="ca0a47d2-26af-4f93-b8a7-5bc26866af98" type="DSIronPythonNode.PythonNode" nickname="Relocated Toilet Extruder" x="9712.48619772583" y="369.303826993904" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN


toiletRecList = IN[0][0]
keyFloorList = IN[1]
floorList = IN[2]


def keyFloorCleaner(keyFloorList):
	keyFloorCleanedList = []
	for i in range(len(keyFloorList)):
		key1 = keyFloorList[i]
		ext1 = []
		for j in range(len(key1)):
			key2 = key1[j]
			ext2 =[]			
			for k in range(len(key2)):
				key3 = key2[k]
				ext2.append(key3)
			ext1.append(ext2)
		keyFloorCleanedList.append(ext1)			
	return keyFloorCleanedList


#to compute the extrusion height for the toilet rect blocks-----------------------------------------------------------------------------
def restroomExtruder(toiletRecList,keyL):
	keyFloorList = keyFloorCleaner(keyL)
	restRmExtruded = []
	testF=[]
	p1		=	Point.ByCoordinates(0,0,0);
	p2		=	Point.ByCoordinates(0,0,100);
	vec		=	Vector.ByTwoPoints(p1,p2)
	for i in range(len(toiletRecList)):
		floorL = floorList[i]
		toil1 = toiletRecList[i]
		key1 = keyFloorList[i]
		ext1 = []
		test1=[]
		for j in range(len(toil1)):
			
			toil2 = toil1[j]
			key2 = key1[j]
			toil2.reverse()
			ext2 =[]
			test1.append(toil2)
			for k in range(len(toil2)):
				toil3 = toil2[k]
				key3 = key2[k]
				keyA = key2[k]
				keyB = key2[k+1]
				key3 = keyB - keyA 
				floor = floorL[key3]
				
				flrA = floorL[keyA]
				flrB = floorL[keyB]
				
				zVal = flrB.EndPoint.Z - flrA.EndPoint.Z				
				ext	=	Curve.ExtrudeAsSolid(toil3,vec,zVal)
				ext2.append(ext)
			ext1.append(ext2)
		testF.append(test1)
		restRmExtruded.append(ext1)
		
				
				
	return restRmExtruded,testF
#---------------------------------------------------------------------------------------------------------------------------------------

#Assign your output to the OUT variable
OUT = restroomExtruder(toiletRecList,keyFloorList)
#OUT = keyFloorCleaner(keyFloorList)</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction guid="7ec7bacf-e397-499c-960a-e6cdf4341cba" type="Dynamo.Nodes.DSFunction" nickname="Floor Surface" x="8548.45530192366" y="-35.6078966586431" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Surface.ByPatch@Autodesk.DesignScript.Geometry.Curve" />
    <DSIronPythonNode.PythonNode guid="50232e62-bb38-4c4f-b50d-87b3345e8ffc" type="DSIronPythonNode.PythonNode" nickname="Building Section Number" x="2900.68073440132" y="2107.05739875306" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import random

x = random.randint(1,6)



#Assign your output to the OUT variable
OUT = x</Script>
    </DSIronPythonNode.PythonNode>
    <DSCoreNodesUI.Input.DoubleSlider guid="237d38a4-eb21-47a2-8fd5-4d3fbd8ce407" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Area One Elevator Can Serve" x="3546.98277856964" y="2652.7569449356" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>5259</System.Double>
      <Range min="200" max="10000" step="1" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSCoreNodesUI.Input.DoubleSlider guid="39341a42-e9a4-44cf-81d4-4d510fd5cf5a" type="DSCoreNodesUI.Input.DoubleSlider" nickname="TechRoom Proportion" x="3073.8940207711" y="2900.8090235886" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>0.2</System.Double>
      <Range min="0.1" max="1" step="0.1" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSCoreNodesUI.Input.DoubleSlider guid="1da4767c-6bd5-46a0-9470-fbe760559ab4" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Core Dimension" x="3069.59219115531" y="3122.23255129282" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>4</System.Double>
      <Range min="0" max="100" step="0.1" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <Dynamo.Nodes.CodeBlockNodeModel guid="86dfd9e1-d79c-4167-9521-4dfde7231176" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Corridor Curve" x="8548.26848531688" y="342.817532140633" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="corridorCurve;" ShouldFocus="false" />
    <DSCoreNodesUI.Input.DoubleSlider guid="885d8729-0cae-4b08-8a9b-4ad0d0ca7e39" type="DSCoreNodesUI.Input.DoubleSlider" nickname="RestRoom Proportion" x="3077.87790489657" y="2971.11767208688" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>0.15</System.Double>
      <Range min="0.1" max="1" step="0.1" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <DSIronPythonNode.PythonNode guid="c421f0fb-5829-4b12-9739-ab162af42cb4" type="DSIronPythonNode.PythonNode" nickname="corridorMaker" x="5922.30097100785" y="2473.2392519693" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

crvList = IN[0]
dist = IN[1]

newCrvList = []
for i in range(len(crvList)):
	crvL = crvList[i]
	newCrvL=[]
	for j in range(len(crvL)):
		crv = crvL[j]
		perCrv = crv.Length
		nCrv = Curve.Offset(crv,dist)
		perNCrv = nCrv.Length
		
		if perNCrv &lt; perCrv:
			nCrv = Curve.Offset(crv,-dist)
		newCrvL.append(nCrv)
	newCrvList.append(newCrvL)
	



#Assign your output to the OUT variable
OUT = newCrvList</Script>
    </DSIronPythonNode.PythonNode>
    <DSCoreNodesUI.Input.IntegerSlider guid="a1bd7c84-7ec2-4a34-966b-c521d7cdd803" type="DSCoreNodesUI.Input.IntegerSlider" nickname="Integer Slider" x="6146.10253052298" y="2302.26059725047" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Int32>55</System.Int32>
      <Range min="0" max="100" step="1" />
    </DSCoreNodesUI.Input.IntegerSlider>
    <Dynamo.Nodes.CodeBlockNodeModel guid="eaae68ca-837f-4bed-9e58-cff8ae1329bb" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="9341.53700238438" y="330.592877831715" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="48f46a7c-0bb0-4c2a-abe6-dd73c7453cc9" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="6595.38402607865" y="3125.43829986925" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="aa6d4354-3452-4be0-9569-61a59b33f09c" type="DSIronPythonNode.PythonNode" nickname="Elevator Packing Generator" x="6269.17480730791" y="3226.01124686203" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="7">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import math
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

mainRecL	=	IN[0]
elevWidth	=	IN[1][0]
elevLength	=	IN[1][1]
totElev		=	IN[2]
lobbyWidth	=	IN[3]
servicRecL	=	IN[4]
interLineL	=	IN[5]
maxElevs	=	IN[6]





def getNumRects():
	recShort	=	otherLen1
	recLong		=	commonLen	
	elevShort	=	getElevShorterDim(elevWidth,elevLength)[0]
	numRects	=	1	
	approx_numElevs	=	int(math.floor(recLong/elevShort))

	#Added to make total num of Elevs always even
	if approx_numElevs%2 &gt; 0: approx_numElevs += 1
	#-----------------------------------------------		
	elevShort 	=	recLong/approx_numElevs		
	while approx_numElevs &gt; maxElevs:
		numRects += 1
		approx_numElevs = int(approx_numElevs/2)	
	return int(numRects)
#-------------------------------------------------------------------------------------------


#to subdivide given rect to num of rects based on a num------------------------------------
def subDivRect(num,mainRec):	
	numRects = getNumRects()
	numRects = num
	if numRects &lt; 2 : 
		return "no need to split"
	
	recList = []
	length1 = commonLen
	length2 = otherLen1
	
	dimension = length1/numRects

	startRec = mainRec
	for i in range(numRects):		
		try:
			rec = splitBox(startRec,dimension,length2)
		except:
			recList.append(rec[1])
			return recList			
		recList.append(rec[0])		
		startRec = rec[1]			
	return recList
#------------------------------------------------------------------------------------------



#function to scale rectangles to add in corridors in between elevators-------------------------------------------------------------
def scaledRects(recLists):
	#make new recLists
	newRecs = recLists[:]
	del newRecs[0]
	del newRecs[-1]
	
	
	endRecs = [recLists[0],recLists[-1]]
	
	outRec=[]
	for rec in newRecs:
		pts = rec.Points
		basePt = pts[0]
		wid = rec.Width
		length = rec.Height
		
		l1 = Line.ByStartPointEndPoint(pts[0],pts[1])
		l2 = Line.ByStartPointEndPoint(pts[0],pts[3])
		
		len1 = l1.Length
		len2 = l2.Length
		fac = 0.75 # hardcoded
		
		#prepare basept, p1 and p2 from Scale1D
		if wid == len1: 
			fromPt = pts[1]
			toPt = l1.PointAtParameter(fac)
			midPt = l1.PointAtParameter(0.5)
		else: 
			fromPt = pts[3]
			toPt = l2.PointAtParameter(fac)
			midPt = l2.PointAtParameter(0.5)
		
		#find the vector to translate the scaled rect		
		pCrv = rec.Scale1D(basePt,fromPt,toPt)
		crv = pCrv.Curves()
		ptsNew = [x.StartPoint for x in crv]
			
		lNew1 = Line.ByStartPointEndPoint(ptsNew[0],ptsNew[1])
		lNew2 = Line.ByStartPointEndPoint(ptsNew[0],ptsNew[3])
			
		if wid == len1: midPtNew = lNew1.PointAtParameter(0.5)
		else: midPtNew = lNew2.PointAtParameter(0.5)
			
			
		#make the vec for translation
		vec= Vector.ByTwoPoints(midPtNew,midPt)
		pCrv = pCrv.Translate(vec)
		
		#block to make rectangle
		crv = pCrv.Curves()
		ptsNew = [x.StartPoint for x in crv]		
		rec = Rectangle.ByCornerPoints(ptsNew[0],ptsNew[3],ptsNew[2],ptsNew[1])
		outRec.append(rec)
			
		
	#code to work on the first and last rectangles.	
	for i in range(len(endRecs)):
		if (i==0):pass
		rec = endRecs[i]
		
		pts = rec.Points
		basePt = pts[0]
		wid = rec.Width
		length = rec.Height
		
		l1 = Line.ByStartPointEndPoint(pts[0],pts[1])
		l2 = Line.ByStartPointEndPoint(pts[0],pts[3])
		
		len1 = l1.Length
		len2 = l2.Length
		fac = 0.9 # hardcoded
		
		#prepare basept, p1 and p2 from Scale1D
		if wid == len1: 
			fromPt = pts[1]
			toPt = l1.PointAtParameter(fac)
			midPt = l1.PointAtParameter(0.5)
		else: 
			fromPt = pts[3]
			toPt = l2.PointAtParameter(fac)
			midPt = l2.PointAtParameter(0.5)
		
		
		
		#find the vector to translate the scaled rect		
		pCrv = rec.Scale1D(basePt,fromPt,toPt)
		crv = pCrv.Curves()
		if(i&gt;0):
			ptsNew = [x.StartPoint for x in crv]
			
			lNew1 = Line.ByStartPointEndPoint(ptsNew[0],ptsNew[1])
			lNew2 = Line.ByStartPointEndPoint(ptsNew[0],ptsNew[3])
			
			if wid == len1: midPtNew = lNew1.PointAtParameter(fac/2)
			else: midPtNew = lNew2.PointAtParameter(fac/2)
		
			#make the vec for translation
			vec= Vector.ByTwoPoints(midPtNew,midPt)
			pCrv = pCrv.Translate(vec)

		#block to make rectangle
		crv = pCrv.Curves()
		ptsNew = [x.StartPoint for x in crv]		
		rec = Rectangle.ByCornerPoints(ptsNew[0],ptsNew[3],ptsNew[2],ptsNew[1])
		
		endRecs[i] = rec
		#break	
		
		
	#finally merge all components
	finList=[]		
	finList.extend([endRecs[0]])
	finList.extend(outRec)
	finList.extend([endRecs[-1]])
		
	return finList
#-----------------------------------------------------------------------------------------------------------------------------------

#get the shorter dimension---------------------------------------------------------------
def getShorterDim(rec):
	width	=	rec.Width
	length	=	rec.Height
	if(width&lt;=length): 
		shortEdge	= width
		longEdge	= length
	else: 
		shortEdge 	= length
		longEdge  	= width
	return shortEdge,longEdge
# END OF FUNCTION ------------------------------------------------------------------------

#get the shorter dimension for elev-------------------------------------------------------
def getElevShorterDim(width,length):
	if(width&lt;length): 
		shortEdge	= width
		longEdge	= length
	else: 
		shortEdge = length
		longEdge  = width
	return shortEdge,longEdge
# END OF FUNCTION ------------------------------------------------------------------------

#====================================================================================================================================================================================
#make rects based on dimension given------------------------------------------------------------------------
def splitBox(rec,dim,length):
	recPts	=	rec.Points
	#make four lines for the input rectangles
	lin0		=	Line.ByStartPointEndPoint(recPts[0],recPts[1])#0
	lin1		=	Line.ByStartPointEndPoint(recPts[1],recPts[2])#1
	lin2 		=	Line.ByStartPointEndPoint(recPts[2],recPts[3])#2
	lin3		=	Line.ByStartPointEndPoint(recPts[3],recPts[0])#3
	# get the first point of first line
	firstPt		=	lin0.StartPoint
	
	# get the length and lines for those edges whose length matches input length
	if lin0.Length &gt;= length-0.005 and lin0.Length &lt;= length+0.005: 
		bigDimension = lin1.Length
		lineShort1 = lin1
		lineShort2 = lin3				
	if lin1.Length &gt;= length-0.005 and lin1.Length &lt;= length+0.005: 
		bigDimension = lin0.Length
		lineShort1 = lin0
		lineShort2 = lin2
	
	#get the points to make the two rectangles
	f1 		=	dim/bigDimension
	ptOut1	=	lineShort1.PointAtParameter(f1)
	ptOut2	=	lineShort2.PointAtParameter(1-f1)
	stPt1	=	lineShort1.StartPoint
	endPt1	=	lineShort1.EndPoint
	stPt2	=	lineShort2.StartPoint
	endPt2	=	lineShort2.EndPoint
	
	# make the new rectangle by corner points !! SEQUENCE OF CORNER POINTS MIGHT BE AN ISSUE
	rec1	=	Rectangle.ByCornerPoints(stPt1,endPt2,ptOut2,ptOut1)
	rec2	=	Rectangle.ByCornerPoints(ptOut1,ptOut2,stPt2,endPt1)
	#get the center points for two rects
	rec1Cen	=	rec1.Center()
	rec2Cen = 	rec2.Center()
	#get the vectors from the first pt
	vec1	=	Vector.ByTwoPoints(firstPt,rec1Cen)
	vec2	=	Vector.ByTwoPoints(firstPt,rec2Cen)
	#compare the length of the vectors to get how far are they from start pt
	vcLen1 	=	vec1.Length
	vcLen2 	=	vec2.Length
	#finally set them as the final ouput rect
	if vcLen1 &lt; vcLen2 :
		outRec1 = 	rec1
		outRec2 = 	rec2
	else:
		outRec1 = 	rec2
		outRec2 = 	rec1	
			
	return outRec1,outRec2
#---------------------------------------------------------------------------------------------------------------	
	
#main function making the elevator packings------------------------------------------------
def makeElevBox(bkRec,commonLen,otherLen1):
	inpRec = []
	inpRec.append(bkRec)

	elevDims	=	getElevShorterDim(elevWidth,elevLength)
	elevShort	=	elevDims[0]
	elevLong	=	elevDims[1]
	
	longCounter = 	0
	listDims	=	[]
	frstPtList	=	[]
	count		=	0
	
	#very imp transition@@@@@@@@@@@
	recShort	=	otherLen1
	recLong		=	commonLen
		
	numElevs	=	int(math.floor(recLong/elevShort))
	#"""
	#Added to make total num of Elevs always even
	if numElevs%2 &gt; 0: 
		numElevs += 1
		#elevShort = recLong/numElevs
	#-----------------------------------------------

	elevShort 	=	recLong/numElevs	
	areaElev 	=	elevShort*commonLen

	
	
	cap = 5		
	#BLOCK TO MAKE LIST OF DIMENSIONS TO PREPARE ELEV ROWS AND LOBBY PLACEMENTS
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
	#loop till you catch up with the dimension longitudinally
	while (cap&gt;0):
		longCounter += elevLong
		if (longCounter &gt; recShort): # recShort replaced by otherLen   +++ longCounter &gt; recShort-0.005 and longCounter &lt; recShort+0.005
			break
		listDims.append(elevLong)
		if (count%2 ==0):
			longCounter += lobbyWidth	
			if (longCounter &gt; recShort):# recShort replaced by otherLen
				break
			listDims.append(lobbyWidth)			
		count		+= 1
	ct = 0
	lobbies = 0
	# test to check whole length added
	for i in range(len(listDims)):
		ct += listDims[i]
		if (listDims[i] == lobbyWidth):
			lobbies += 1
	#if lobbies == 0: lobbies =1
	#get the left over space
	leftOver =  recShort - ct
	perBayAdd=  leftOver/lobbies
	perBayAdd+=	0.002
	
	# distribute it to the lift lobbies
	if (perBayAdd &gt; 0):
		for i in range(len(listDims)):
			if (listDims[i] == lobbyWidth):
				listDims[i] += perBayAdd + 0.002
	
	#added to make sure the total dimension not exceeding
	if sum(listDims)&gt;otherLen1:
		extra = sum(listDims)-otherLen1
		listDims[-1] -= extra
	
	recLists = []
	stRec	 = bkRec

	index1 = 0
	index2 = 1
	longDim = getShorterDim(servicRec)[1]
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
	
	str =""
	prnList=[]
	#BLOCK TO MAKE ELEVATOR ROWS
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
	for i in range(len(listDims)-1):		
		try:
			rec = splitBox(stRec,listDims[i],commonLen)		
			prnList.append("DID IT")
		except:
			#nRec = stRec.Reverse
			#rec = splitBox(nRec,listDims[i],commonLen)	
			str =  "Not Done"
			prnList.append("FAILED")
			#continue
		recLists.append(rec[0])
		#frstPtList.append(rec[2])
		stRec = rec[1]
		if (i==len(listDims)-2): 
			recLists.append(rec[1])
			prnList.append("LAST CASE")
			#break
	
	#make the list of elevator row first
	elevRowLists = []
	copRecLists =  []
	str = "dont know"
	strN= ""
	for i in range(len(recLists)):
		if i ==0: dimA = listDims[i+1]		
		#if dimA != listDims[i]: copRecLists.append(recLists[i])		

		if i != 0 and dimA !=listDims[i-1] and i == len(recLists)-1 : 
			pass
		elif dimA != listDims[i]: copRecLists.append(recLists[i])
			
		#copRecLists = list(recLists[i] if dimA == listDims[i]:)
	
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	#BLOCK TO PLACE ELEVATOR BOXES IN THE ROWS
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	str2 = ""
	recElevs=[]
	recElevsRow=[]
	for i in range(len(copRecLists)):
		stRec = copRecLists[i]
		elevRow=[]
		shorter = getShorterDim(stRec)[0]
		for j in range(int(numElevs)-1):		
			try:
				rec = splitBox(stRec,elevShort+0.0002,shorter)				
			except:
				#continue
				stt = ""
			stRec = rec[1]
			elevRow.append(rec[0])
			if j==int(numElevs)-2: 
				elevRow.append(rec[1])
			
			#frstPtList.append(rec[2])
			recElevs.append(rec)
			str2 =  " all added" 
		recElevsRow.append(elevRow)
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
	totalElev = [len(x) for x in recElevsRow]
	sumtotalElev = sum(totalElev)
	#return recLists,listDims,recDims[0],copRecLists,recElevs,len(recElevs)
	return recElevsRow


def mainCode(mainRec):
	numRc = getNumRects()
	if numRc &gt;=2:
		aRects = subDivRect(getNumRects(),mainRec)
		subRects = scaledRects(aRects)
	else:
		subRects = [mainRec]
	outL = []
	strList=[]
	for i in range(numRc):
		
		bankRec = subRects[i]
		comLen = interLine.Length/numRc
		
		# set commonLength and otherLength
		if (comLen == bankRec.Width): 
			otrLen = bankRec.Height
		elif (comLen == bankRec.Height): 
			otrLen = bankRec.Width
		elif (bankRec.Width&lt;bankRec.Height):
			comLen = bankRec.Width
			otrLen = bankRec.Height
		else:
			comLen = bankRec.Height
			otrLen = bankRec.Width
				
		out = makeElevBox(bankRec,comLen,otrLen)
		outL.append(out)
	return outL
	
#function to see rectangle size ---------------------------------------------------------------------------------------------
def sizeChecker(rec,dim):
	wid = rec.Width
	ht = rec.Height	
	if wid &lt; dim or ht &lt; dim:
		return False
	else: return True
#----------------------------------------------------------------------------------------------------------------------------



outF=[]
interLine  = interLineL[0]
testLen=[]
for i in range(len(mainRecL)):
	#1st Block lev handling each rect block
	coreInside = mainRecL[i]
	#outF.append(len(coreInside))
	interLine  = interLineL[i][0][0]

	out1=[]
	for j in range(len(coreInside)):
		interLine  = interLineL[i][j][0]
		commonLen	=	float(interLine.Length)
		otherLen1	=	0
		mainRec 	= 	coreInside[j]
		bankRec 	= 	mainRec
		servicRec 	=	servicRecL[i][j]
			
		if (commonLen &gt; mainRec.Width-0.005 and commonLen &lt; mainRec.Width+0.005): otherLen1 = float(mainRec.Height)
		if (commonLen &gt; mainRec.Height-0.005 and commonLen &lt; mainRec.Height+0.005): otherLen1 = float(mainRec.Width)
		out = mainCode(mainRec)
		testLen.append(otherLen1)
		out1.append(out)
	outF.append(out1)
		

		
	

#Assign your output to the OUT variable
OUT = outF
</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction guid="8acaaa64-cba1-403c-a443-8a0de45ba711" type="Dynamo.Nodes.DSFunction" nickname="Solid.ByUnion" x="10464.6828896968" y="1562.90756420693" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Solid.ByUnion@Autodesk.DesignScript.Geometry.Solid[]" />
    <Dynamo.Nodes.DSFunction guid="ab3bd6e2-8be9-4de3-8f87-f09d815d7938" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="10317.4673932615" y="1566.65340955911" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <DSCoreNodesUI.CreateList guid="abb54e12-9c90-45ec-b444-d035df4e8b8f" type="DSCoreNodesUI.CreateList" nickname="List.Create" x="10131.6538539271" y="1497.79159147367" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="4" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="eca8f669-4222-4af6-80f6-eb21915bc1e8" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="9730.15401084029" y="505.690225661584" isVisible="false" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="b4d71512-4181-4063-981b-5eeeb8de26e9" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Service Core Curve" x="8548.29489793204" y="432.766040609949" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="serviceCoreCurve;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="c8f7de20-6b12-487b-bf1b-48330d19ae9a" type="Dynamo.Nodes.DSFunction" nickname="Solid.Difference" x="10628.7508020228" y="1562.0736916086" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Solid.Difference@Autodesk.DesignScript.Geometry.Solid" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="d95d732a-0763-4032-af0e-8457b8dc6db1" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Elev Banks " x="9532.37407391235" y="1340.21386467753" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a[0];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="d0fa09a3-6709-4d90-ae37-7cd0127d6268" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Bank Rectangle Piece" x="9495.75598676181" y="1247.39500639731" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Bank_Rectangle[0];" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="01d5888e-08ea-4c87-b189-98ceda20fa1b" type="DSIronPythonNode.PythonNode" nickname="Lobby Corridor Finder" x="9895.95900048454" y="1268.07686238725" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

bankRecList = IN[0]
elevBanksList= IN[1]


"""
polyBSolid = polyB.ExtrudeAsSolid(Vector.ZAxis(),5)
		polyASrf = Surface.ByPatch(polyA)
		trimmedSurf = Surface.SubtractFrom(polyASrf,polyBSolid)
		trimmedSrfList.append(trimmedSurf)
		
		
"""


# to make the 


trimmedList = []
solidN = []
for i in range(len(bankRecList)):
	bankRecL = bankRecList[i]
	elevBankL = elevBanksList[i]
	trimmedL=[]
	solidListAll = []
	for j in range(len(bankRecL)):
		bankRec = bankRecL[j]
		elevB = elevBankL[j]
		solidList = []
		for k in range(len(elevB)):
			elev = elevB[k]
			polySolid = elev.ExtrudeAsSolid(Vector.ZAxis(),-5)
			solidList.append(polySolid)
		solidListAll.append(solidList)
		polyBSolid = Solid.ByUnion(solidList)
		polyASrf = Surface.ByPatch(bankRec)
		trimmedSurf = Surface.SubtractFrom(polyASrf,polyBSolid)
		trimmedL.append(trimmedSurf)
	trimmedList.append(trimmedL)
	solidN.append(solidListAll)

#Assign your output to the OUT variable
OUT = trimmedList</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="e7225980-f9d5-478a-be88-21343338f1f1" type="DSIronPythonNode.PythonNode" nickname="Elev Bank Converter" x="9653.95144670876" y="1335.25972363637" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

elevBanksList = IN[0]

finalNew = []
for i in range(len(elevBanksList)):
	elevL = elevBanksList[i]
	newL1=[]
	for j in range(len(elevL)):
		newL2=[]
		elev = elevL[j]
		for k in range(len(elev)):	
			newL2.extend(elev[k])
		newL1.append(newL2)			
	finalNew.append(newL1)
	

#Assign your output to the OUT variable
OUT = finalNew</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="75cd1c97-397b-4206-9553-ad9abe567037" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="9623.13782595071" y="1424.35972573582" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="Vector.ZAxis();&#xA;100;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="fd0b0f27-3078-4dad-95d7-be9fd67ae15b" type="Dynamo.Nodes.DSFunction" nickname="Surface.Thicken" x="9897.01765464032" y="1381.86612180305" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Surface.Thicken@double">
      <PortInfo index="1" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.CodeBlockNodeModel guid="ab80b6dc-dae9-41e6-a626-445b0586332b" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="corridorSystem" x="9889.75228437585" y="1176.93404119065" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="corridorSystem;" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="6eb46a0f-e1da-468c-a7b4-6b4af84b6600" type="DSIronPythonNode.PythonNode" nickname="corridor Extruded" x="10311.7859214589" y="1312.17328386378" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

corridorList = IN[0]
zValList = IN[1]

corVolList = []
for i in range(len(corridorList)):
	corL = corridorList[i]
	zValL = zValList[i]
	corVolL=[]
	for j in range(len(corL)):
		coridorVol = Surface.Thicken(corL[j][0],zValL[j])
		corVolL.append(coridorVol)
	corVolList.append(corVolL)

#Assign your output to the OUT variable
OUT = corVolList</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction guid="6b22c561-419b-42aa-95ff-8d69310bc573" type="Dynamo.Nodes.DSFunction" nickname="Solid.Difference" x="11523.2312083427" y="1349.3375486762" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Solid.Difference@Autodesk.DesignScript.Geometry.Solid" />
    <Dynamo.Nodes.DSFunction guid="5ee75006-ac1f-4700-abd5-1e947c9d6bf8" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="10328.5010606299" y="1227.55607377225" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="5fbb5c68-3ccc-4144-bb6e-47be5aadcc8a" type="Dynamo.Nodes.DSFunction" nickname="Solid.ByUnion" x="10904.0436257613" y="1224.91701671127" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Solid.ByUnion@Autodesk.DesignScript.Geometry.Solid[]" />
    <Dynamo.Nodes.DSFunction guid="4a00ac65-73ae-4219-8cfa-91b58d0cbd60" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="10810.2554734549" y="1576.6732733087" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="c5b9e966-f814-4411-ab01-8ecfb7375870" type="Dynamo.Nodes.DSFunction" nickname="Solid.ByUnion" x="10920.4085928613" y="1402.23506757804" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Solid.ByUnion@Autodesk.DesignScript.Geometry.Solid[]" />
    <Dynamo.Nodes.DSFunction guid="86062ee4-c287-4734-ac27-66e8c7fe4773" type="Dynamo.Nodes.DSFunction" nickname="Geometry.Intersect" x="11522.4891470304" y="1240.74051195389" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry" />
    <Dynamo.Nodes.DSFunction guid="183a0e0e-704f-409a-afbc-bb46f0e7e324" type="Dynamo.Nodes.DSFunction" nickname="STL.ByASCII" x="-2927.85124372734" y="2381.22622268176" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.STL.ByASCII@string" />
    <Dynamo.Nodes.DSFunction guid="4493f812-d429-4c80-84c6-f5ba85f0115d" type="Dynamo.Nodes.DSFunction" nickname="Shell.BySTL" x="-2738.52716872606" y="2380.6773184951" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Shell.BySTL@stuffer.STL" />
    <Dynamo.Nodes.DSFunction guid="ce8d14dd-fddd-42b8-be9a-8cc38062c788" type="Dynamo.Nodes.DSFunction" nickname="Shell.BBox" x="-2549.33364517533" y="2559.71899444067" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Shell.BBox" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="41da454f-1a1e-47ec-97b1-184f7b20da7c" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-2470.84303661717" y="2766.38167850587" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="0.5;&#xA;3.5;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="e34d7277-20b3-4e9d-85e5-f32914cbd4bd" type="Dynamo.Nodes.DSFunction" nickname="GridBasis.BySize" x="-2336.14484546695" y="2758.14147035973" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.GridBasis.BySize@double,double" />
    <Dynamo.Nodes.DSFunction guid="25efc871-4a5f-4561-8069-f2ea52a23294" type="Dynamo.Nodes.DSFunction" nickname="Range3d.Min" x="-2316.76404549346" y="2514.49712783586" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Range3d.Min" />
    <Dynamo.Nodes.DSFunction guid="7ea7a253-ae46-402f-9c57-797db8b5ddd6" type="Dynamo.Nodes.DSFunction" nickname="Range3d.Max" x="-2314.91825501979" y="2613.24691817697" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Range3d.Max" />
    <Dynamo.Nodes.DSFunction guid="118799ea-9c63-4f15-92d9-cc9033552cb0" type="Dynamo.Nodes.DSFunction" nickname="Point3d.Z" x="-2111.88130291657" y="2615.09270865064" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Point3d.Z" />
    <Dynamo.Nodes.DSFunction guid="aff25741-e0fc-451b-9102-24b9dd0ddf92" type="Dynamo.Nodes.DSFunction" nickname="Point3d.Z" x="-2114.64998862707" y="2514.49712783586" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Point3d.Z" />
    <Dynamo.Nodes.DSFunction guid="6c859c4d-2bf6-4683-9a74-bef10bd3886d" type="Dynamo.Nodes.DSFunction" nickname="GridBasis.FloorHeight" x="-2087.88602675891" y="2758.14147035973" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.GridBasis.FloorHeight@int" />
    <Dynamo.Nodes.DSFunction guid="a03a8666-847d-460e-8a8c-2f50a08a2e22" type="Dynamo.Nodes.DSFunction" nickname="Shell.GetFloorOutline" x="-1294.51346211382" y="2379.31283488247" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Shell.GetFloorOutline@double" />
    <Dynamo.Nodes.DSFunction guid="56f8f0a2-9053-4e49-9e4c-9fcd34781bea" type="Dynamo.Nodes.DSFunction" nickname="DynamoGeometry.PolygonsByOutline2d" x="-547.715321393096" y="2484.90439161161" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.DynamoGeometry.PolygonsByOutline2d@stuffer.Outline2d,double" />
    <Dynamo.Nodes.DSFunction guid="cd773962-79d4-4056-9ec3-671f63e28616" type="Dynamo.Nodes.DSFunction" nickname="STLxOutlines.ByHeightAndOutline2d" x="-549.814522946695" y="2299.59712850039" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.STLxOutlines.ByHeightAndOutline2d@double[],stuffer.Outline2d[]" />
    <Dynamo.Nodes.DSFunction guid="186f6ea4-50f1-44cd-ac17-ecd884ecaac1" type="Dynamo.Nodes.DSFunction" nickname="STLxOutlines.ToASCII" x="-239.055160894418" y="2299.59712850039" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.STLxOutlines.ToASCII" />
    <Dynamo.Nodes.DSFunction guid="00997a11-4ca2-486f-8531-ed0e03b6c6d5" type="Dynamo.Nodes.DSFunction" nickname="File.WriteText" x="51.6504459176776" y="2166.00943266627" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.IO.File.WriteText@string,string" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="793f2423-ce5f-44f4-a2e9-1c5689b14095" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-763.354903375492" y="2170.57827117878" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a={&quot;C:\Users\Colin\Documents\GitHub\Akaba\services\generators\ExeBridge\ExeBridge\Generator\Vision\Dynamo\outlines.stlx&quot;};" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="eae8044d-018a-4b18-9952-bce38c14bb3f" type="Dynamo.Nodes.DSFunction" nickname="Grid2d.ByOutline" x="-794.401078646404" y="3094.99253376393" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Grid2d.ByOutline@stuffer.Outline2d,stuffer.GridBasis" />
    <Dynamo.Nodes.DSFunction guid="07f2448e-8578-4d69-a2b1-d0036869e0c4" type="Dynamo.Nodes.DSFunction" nickname="STLxGrids.ByHeightAndGrid2d" x="-592.892586513209" y="3027.56192561633" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.STLxGrids.ByHeightAndGrid2d@double[],stuffer.Grid2d[]" />
    <Dynamo.Nodes.DSFunction guid="c8f24ab2-44f4-4546-8ad3-f92cb457088b" type="Dynamo.Nodes.DSFunction" nickname="STLxGrids.ToASCII" x="-359.036867328453" y="3027.56192561633" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.STLxGrids.ToASCII" />
    <Dynamo.Nodes.DSFunction guid="edca3d25-54b8-4fba-8360-a39f85c356e5" type="Dynamo.Nodes.DSFunction" nickname="File.WriteText" x="18.9810426902123" y="3222.61697062496" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.IO.File.WriteText@string,string" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="92a88845-a30f-450e-8a68-8a465cff4a74" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-796.024306602957" y="3227.18580913747" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a={&quot;C:\Users\Colin\Documents\GitHub\Akaba\services\generators\ExeBridge\ExeBridge\Generator\Vision\Dynamo\grids.stlx&quot;};" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="0b83fe19-c5e6-44ad-b444-36ce8fa87e6a" type="Dynamo.Nodes.DSFunction" nickname="File.WriteText" x="-2508.1225973903" y="2148.74294738694" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.IO.File.WriteText@string,string" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="7a43b7f5-8a35-411c-8bb3-fbb74feb876b" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-3323.12794668347" y="2153.31178589945" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="a={&quot;C:\Users\Colin\Documents\GitHub\Akaba\services\generators\ExeBridge\ExeBridge\Generator\Vision\Dynamo\shell.stl&quot;};" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="3ad9a04a-51c9-4be1-b228-e2c70c62854c" type="Dynamo.Nodes.DSFunction" nickname="STL.ToASCII" x="-2733.31816914696" y="2268.0215295637" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.STL.ToASCII" />
    <Dynamo.Nodes.Watch guid="d5dd44e8-471d-4744-b003-c5806a8881de" type="Dynamo.Nodes.Watch" nickname="Watch" x="392.935936995303" y="2421.19479898831" isVisible="true" isUpstreamVisible="true" lacing="Disabled" />
    <Dynamo.Nodes.Watch guid="fed40ad0-41a7-4aaa-8e6c-c96f18f65067" type="Dynamo.Nodes.Watch" nickname="Watch" x="392.386225887353" y="2660.15081612022" isVisible="true" isUpstreamVisible="true" lacing="Disabled" />
    <Dynamo.Nodes.DSFunction guid="937db373-64e5-4931-8c24-5f23743700aa" type="Dynamo.Nodes.DSFunction" nickname="Core.RectFloorPlates" x="-713.954962599435" y="2750.92853204542" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Core.RectFloorPlates@stuffer.Outline2d" />
    <Dynamo.Nodes.Watch guid="18e12442-9a45-4695-9ccd-e96cd98a5214" type="Dynamo.Nodes.Watch" nickname="Watch" x="-26.8181241071868" y="2750.97801996886" isVisible="true" isUpstreamVisible="true" lacing="Disabled" />
    <Dynamo.Nodes.DSFunction guid="5d75b2fd-2400-490d-87ce-2945e79c9638" type="Dynamo.Nodes.DSFunction" nickname="Polygon2d.BBox" x="-250.829399439865" y="2805.10687328051" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Polygon2d.BBox" />
    <Dynamo.Nodes.Watch guid="2413fd13-5342-419c-8d6e-d3d3b2400a3f" type="Dynamo.Nodes.Watch" nickname="Watch" x="-1253.10055705664" y="2582.08651205534" isVisible="true" isUpstreamVisible="true" lacing="Disabled" />
    <Dynamo.Nodes.Watch guid="901ee76e-e4be-4072-8425-66f2050bc133" type="Dynamo.Nodes.Watch" nickname="Watch" x="-1879.83935667941" y="2308.12488359215" isVisible="true" isUpstreamVisible="true" lacing="Disabled" />
    <Dynamo.Nodes.Watch guid="f19c159a-ec01-40c6-9ca3-fe6587a4b90c" type="Dynamo.Nodes.Watch" nickname="Watch" x="-2048.3325600016" y="2306.92136071127" isVisible="true" isUpstreamVisible="true" lacing="Disabled" />
    <Dynamo.Nodes.DSFunction guid="e4b9550f-4d6b-4d42-9e92-3993bdd03028" type="Dynamo.Nodes.DSFunction" nickname="-" x="-1874.26550253449" y="2615.65508034712" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="" function="-@var[]..[],var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="007f0367-de33-44e9-92bc-8af3f0c5e45e" type="Dynamo.Nodes.DSFunction" nickname="Core.SimpleJoin" x="-501.818126907477" y="2751.14854406501" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="..\..\..\..\..\hoover\stuffer\bin\Release\ShellTools.dll" function="stuffer.Core.SimpleJoin@stuffer.Polygon2d[]" />
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="2aa2aa0b-051f-40d7-aa9e-5cb0b5ba33a3" start_index="0" end="3719525c-c82d-4453-b8cf-6bb58712191e" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="3719525c-c82d-4453-b8cf-6bb58712191e" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="6" portType="0" />
    <Dynamo.Models.ConnectorModel start="3719525c-c82d-4453-b8cf-6bb58712191e" start_index="0" end="599e3168-7c24-413f-8b77-44a84794b0ab" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="3719525c-c82d-4453-b8cf-6bb58712191e" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="6" portType="0" />
    <Dynamo.Models.ConnectorModel start="3719525c-c82d-4453-b8cf-6bb58712191e" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="6" portType="0" />
    <Dynamo.Models.ConnectorModel start="3719525c-c82d-4453-b8cf-6bb58712191e" start_index="0" end="aa6d4354-3452-4be0-9569-61a59b33f09c" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="868a7954-8eff-428e-861d-790b11492e06" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="5" portType="0" />
    <Dynamo.Models.ConnectorModel start="868a7954-8eff-428e-861d-790b11492e06" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="5" portType="0" />
    <Dynamo.Models.ConnectorModel start="868a7954-8eff-428e-861d-790b11492e06" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="5" portType="0" />
    <Dynamo.Models.ConnectorModel start="ac550d14-fe5f-4c02-b394-9c4a8baa43a0" start_index="0" end="599e3168-7c24-413f-8b77-44a84794b0ab" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="ac550d14-fe5f-4c02-b394-9c4a8baa43a0" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="9" portType="0" />
    <Dynamo.Models.ConnectorModel start="ac550d14-fe5f-4c02-b394-9c4a8baa43a0" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="9" portType="0" />
    <Dynamo.Models.ConnectorModel start="ac550d14-fe5f-4c02-b394-9c4a8baa43a0" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="9" portType="0" />
    <Dynamo.Models.ConnectorModel start="ac550d14-fe5f-4c02-b394-9c4a8baa43a0" start_index="0" end="aa6d4354-3452-4be0-9569-61a59b33f09c" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="3c9da584-a4a5-4e65-bc78-7a785395b657" start_index="0" end="3719525c-c82d-4453-b8cf-6bb58712191e" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="3c9da584-a4a5-4e65-bc78-7a785395b657" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="3c9da584-a4a5-4e65-bc78-7a785395b657" start_index="0" end="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" end_index="5" portType="0" />
    <Dynamo.Models.ConnectorModel start="3c9da584-a4a5-4e65-bc78-7a785395b657" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="3c9da584-a4a5-4e65-bc78-7a785395b657" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="734c4bd1-79dd-41fa-94f6-e7853f1a881d" start_index="0" end="599e3168-7c24-413f-8b77-44a84794b0ab" end_index="6" portType="0" />
    <Dynamo.Models.ConnectorModel start="734c4bd1-79dd-41fa-94f6-e7853f1a881d" start_index="0" end="aa6d4354-3452-4be0-9569-61a59b33f09c" end_index="6" portType="0" />
    <Dynamo.Models.ConnectorModel start="af947995-a8ab-4eec-93f9-fc6c56ab9069" start_index="0" end="ed23a153-1f8a-4f82-8d8f-3ba531d6ba90" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="a450c4e3-9c4c-40f1-9e07-ca41c64d6197" start_index="0" end="275be690-5a3f-485b-80f7-ac8d19efe42d" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="a450c4e3-9c4c-40f1-9e07-ca41c64d6197" start_index="0" end="28d06a4b-83af-430e-b24a-95451ef5cb10" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="a450c4e3-9c4c-40f1-9e07-ca41c64d6197" start_index="0" end="a6e42b9e-57c1-4793-b50b-6a3e0bbfc790" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="a450c4e3-9c4c-40f1-9e07-ca41c64d6197" start_index="0" end="aad2be8b-99c5-41f1-8069-657f1764bde3" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="a450c4e3-9c4c-40f1-9e07-ca41c64d6197" start_index="0" end="bbc28dfc-3a25-48c9-a7ce-c135e908e8cc" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="1612be2e-2aea-4340-8229-12ae72ca4ac0" start_index="0" end="879012ae-02b6-4b1e-b2b1-20d0cfab7683" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ed23a153-1f8a-4f82-8d8f-3ba531d6ba90" start_index="0" end="cf10eef3-cebf-4e5a-9b61-513006e72f2f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ed23a153-1f8a-4f82-8d8f-3ba531d6ba90" start_index="0" end="1612be2e-2aea-4340-8229-12ae72ca4ac0" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="07a599e5-558f-4934-9cae-8527bb18e24c" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="07a599e5-558f-4934-9cae-8527bb18e24c" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="07a599e5-558f-4934-9cae-8527bb18e24c" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="fd6d25bd-d88d-4cf4-8782-f542af194703" start_index="0" end="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="fd6d25bd-d88d-4cf4-8782-f542af194703" start_index="0" end="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a239fc6e-d882-484b-9cb4-4bd033383935" start_index="0" end="b76d38ae-2dbc-4ea0-af12-a1a6424589c0" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" start_index="1" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" start_index="1" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="b8e89c2f-2fc9-4a6d-bd8a-60ce7d74db11" start_index="1" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="879012ae-02b6-4b1e-b2b1-20d0cfab7683" start_index="0" end="8d4d07be-682a-42eb-af22-21e2671b1bef" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="8d4d07be-682a-42eb-af22-21e2671b1bef" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="8d4d07be-682a-42eb-af22-21e2671b1bef" start_index="0" end="c155fb81-334d-4ca4-baa0-c63442677f68" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="8d4d07be-682a-42eb-af22-21e2671b1bef" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="8d4d07be-682a-42eb-af22-21e2671b1bef" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="275be690-5a3f-485b-80f7-ac8d19efe42d" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="10" portType="0" />
    <Dynamo.Models.ConnectorModel start="45748629-e625-430b-b33a-b2c437d57dbb" start_index="0" end="3df664c4-cf2c-421b-98a3-30ffd488bb28" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a7e9f424-9740-4d40-afd1-1f4aae322780" start_index="0" end="ef4e036a-4c6e-4d4d-97bb-9e7da30a4a59" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a7e9f424-9740-4d40-afd1-1f4aae322780" start_index="0" end="599e3168-7c24-413f-8b77-44a84794b0ab" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="a7e9f424-9740-4d40-afd1-1f4aae322780" start_index="0" end="903120c6-a2bc-4a7f-9324-f0befe0d91a7" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="a7e9f424-9740-4d40-afd1-1f4aae322780" start_index="0" end="3df664c4-cf2c-421b-98a3-30ffd488bb28" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="a7e9f424-9740-4d40-afd1-1f4aae322780" start_index="0" end="aa6d4354-3452-4be0-9569-61a59b33f09c" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="f4269aaf-9384-40ee-8269-b0836ca82d71" start_index="0" end="3df664c4-cf2c-421b-98a3-30ffd488bb28" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="59322da8-84c2-4652-aaed-b6043c40610e" start_index="0" end="c421f0fb-5829-4b12-9739-ab162af42cb4" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="59322da8-84c2-4652-aaed-b6043c40610e" start_index="0" end="b4d71512-4181-4063-981b-5eeeb8de26e9" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7816939f-d2e5-4c40-8099-0ed64d83d87c" start_index="0" end="ef4e036a-4c6e-4d4d-97bb-9e7da30a4a59" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7816939f-d2e5-4c40-8099-0ed64d83d87c" start_index="0" end="599e3168-7c24-413f-8b77-44a84794b0ab" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7816939f-d2e5-4c40-8099-0ed64d83d87c" start_index="0" end="aa6d4354-3452-4be0-9569-61a59b33f09c" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ef4e036a-4c6e-4d4d-97bb-9e7da30a4a59" start_index="0" end="599e3168-7c24-413f-8b77-44a84794b0ab" end_index="5" portType="0" />
    <Dynamo.Models.ConnectorModel start="ef4e036a-4c6e-4d4d-97bb-9e7da30a4a59" start_index="0" end="10cebea5-de1b-4aaa-bc6e-3cb4bf87b46f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="ef4e036a-4c6e-4d4d-97bb-9e7da30a4a59" start_index="0" end="aa6d4354-3452-4be0-9569-61a59b33f09c" end_index="5" portType="0" />
    <Dynamo.Models.ConnectorModel start="599e3168-7c24-413f-8b77-44a84794b0ab" start_index="0" end="10cebea5-de1b-4aaa-bc6e-3cb4bf87b46f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="599e3168-7c24-413f-8b77-44a84794b0ab" start_index="0" end="48f46a7c-0bb0-4c2a-abe6-dd73c7453cc9" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d150f1bb-500e-42b9-ad82-a7c3b4a1c3d5" start_index="0" end="599e3168-7c24-413f-8b77-44a84794b0ab" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="d150f1bb-500e-42b9-ad82-a7c3b4a1c3d5" start_index="0" end="fd242a9f-8214-48ad-9997-38fe4d82afe3" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d150f1bb-500e-42b9-ad82-a7c3b4a1c3d5" start_index="0" end="aa6d4354-3452-4be0-9569-61a59b33f09c" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="c155fb81-334d-4ca4-baa0-c63442677f68" start_index="0" end="d150f1bb-500e-42b9-ad82-a7c3b4a1c3d5" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="903120c6-a2bc-4a7f-9324-f0befe0d91a7" start_index="0" end="30c768a4-1f41-4c2c-bcb6-cf020b9dc548" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="903120c6-a2bc-4a7f-9324-f0befe0d91a7" start_index="0" end="88d9fd1f-c501-4b1a-9092-bd3d72fcc76a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="903120c6-a2bc-4a7f-9324-f0befe0d91a7" start_index="0" end="85ef2fe9-43ab-415a-bebb-9b321b470057" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="88d9fd1f-c501-4b1a-9092-bd3d72fcc76a" start_index="0" end="95479b69-5cbb-4336-80ba-37d5fce71073" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="1fee66bf-756f-47be-81bc-059d7b7b49b2" start_index="0" end="dd5e0569-228b-47de-8b41-3c3e9992047d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="3df664c4-cf2c-421b-98a3-30ffd488bb28" start_index="0" end="a1707fe3-b13a-42d3-a492-795cdce17ff9" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="3df664c4-cf2c-421b-98a3-30ffd488bb28" start_index="0" end="ef11afca-5d65-4104-bd81-ec44bc36f7ad" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="a1707fe3-b13a-42d3-a492-795cdce17ff9" start_index="0" end="903120c6-a2bc-4a7f-9324-f0befe0d91a7" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="ef11afca-5d65-4104-bd81-ec44bc36f7ad" start_index="0" end="903120c6-a2bc-4a7f-9324-f0befe0d91a7" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="ef11afca-5d65-4104-bd81-ec44bc36f7ad" start_index="0" end="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="f904476b-4d4d-4cdf-a2c5-22f70188e33f" start_index="0" end="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="f904476b-4d4d-4cdf-a2c5-22f70188e33f" start_index="0" end="843c144f-6497-4e21-a4f6-a300e266a735" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="1c8deb62-9bdb-4bdf-9df2-e136d59b3ea8" start_index="0" end="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" start_index="0" end="65236426-c712-41c1-ab44-e91adffb856b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="10cebea5-de1b-4aaa-bc6e-3cb4bf87b46f" start_index="0" end="d8b40901-d208-4b8b-82ef-878ddaddfd63" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="10cebea5-de1b-4aaa-bc6e-3cb4bf87b46f" start_index="0" end="5d1b39b1-969d-4a26-a874-69696f624dd9" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d8b40901-d208-4b8b-82ef-878ddaddfd63" start_index="0" end="f904476b-4d4d-4cdf-a2c5-22f70188e33f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d8b40901-d208-4b8b-82ef-878ddaddfd63" start_index="0" end="5ea270e8-1be9-42b0-8915-a7af312a821a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d8b40901-d208-4b8b-82ef-878ddaddfd63" start_index="0" end="d95d732a-0763-4032-af0e-8457b8dc6db1" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="dd5e0569-228b-47de-8b41-3c3e9992047d" start_index="0" end="d8b40901-d208-4b8b-82ef-878ddaddfd63" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="dd5e0569-228b-47de-8b41-3c3e9992047d" start_index="0" end="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="dd5e0569-228b-47de-8b41-3c3e9992047d" start_index="0" end="843c144f-6497-4e21-a4f6-a300e266a735" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="5ea270e8-1be9-42b0-8915-a7af312a821a" start_index="0" end="4847187c-ff80-484b-a041-d51d04c3e7cd" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="5ea270e8-1be9-42b0-8915-a7af312a821a" start_index="0" end="b21d6ee7-977d-44bf-8274-d0ce72ede0a8" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="cf10eef3-cebf-4e5a-9b61-513006e72f2f" start_index="0" end="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="453022bb-860d-4177-82ce-88a7dcea4e91" start_index="0" end="d9ea6210-bd0b-42aa-82eb-02594b4fc93b" end_index="6" portType="0" />
    <Dynamo.Models.ConnectorModel start="0b7f5ad5-a16d-4c3c-a42a-b482fd9378fe" start_index="0" end="843c144f-6497-4e21-a4f6-a300e266a735" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="407b1006-41a4-4600-b34e-baead4cfb0e7" start_index="0" end="843c144f-6497-4e21-a4f6-a300e266a735" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="73e95364-e73a-4337-9543-03a6a09286f9" start_index="0" end="843c144f-6497-4e21-a4f6-a300e266a735" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="80296a7c-3afc-47b9-b874-99ce710d86ee" start_index="0" end="4847187c-ff80-484b-a041-d51d04c3e7cd" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="80296a7c-3afc-47b9-b874-99ce710d86ee" start_index="0" end="4c2a5a5c-31fc-4fbc-bc84-cb7582c1af6b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="80296a7c-3afc-47b9-b874-99ce710d86ee" start_index="0" end="b21d6ee7-977d-44bf-8274-d0ce72ede0a8" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="80296a7c-3afc-47b9-b874-99ce710d86ee" start_index="0" end="ca0a47d2-26af-4f93-b8a7-5bc26866af98" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="65236426-c712-41c1-ab44-e91adffb856b" start_index="0" end="0942b713-d985-4d61-a2d0-788908152b66" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="65236426-c712-41c1-ab44-e91adffb856b" start_index="0" end="0b7f5ad5-a16d-4c3c-a42a-b482fd9378fe" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="65236426-c712-41c1-ab44-e91adffb856b" start_index="0" end="407b1006-41a4-4600-b34e-baead4cfb0e7" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="65236426-c712-41c1-ab44-e91adffb856b" start_index="0" end="80296a7c-3afc-47b9-b874-99ce710d86ee" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="4847187c-ff80-484b-a041-d51d04c3e7cd" start_index="0" end="79dde83d-39a3-4872-8118-5d8dc6101d79" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="4847187c-ff80-484b-a041-d51d04c3e7cd" start_index="0" end="3b808e33-a864-4165-8669-fa53ecabe992" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="4847187c-ff80-484b-a041-d51d04c3e7cd" start_index="0" end="abb54e12-9c90-45ec-b444-d035df4e8b8f" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="6f53f637-8b26-4ad8-90a4-46e425884827" start_index="0" end="bc49473e-8dc9-4626-a370-0c259a1dc114" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="6f53f637-8b26-4ad8-90a4-46e425884827" start_index="0" end="44784fc5-fb21-4e94-a832-f79bffe92063" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="3b808e33-a864-4165-8669-fa53ecabe992" start_index="0" end="e9d8df26-da71-43c3-9be7-b3c58d84410a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="3b808e33-a864-4165-8669-fa53ecabe992" start_index="0" end="5e2453e0-6fa3-431f-8bc2-6af12cd06e47" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ac397449-72b8-4053-8904-c07f461562a2" start_index="0" end="12939b65-2328-4bf0-804f-fe86f8bac92f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="233e1889-93af-4320-8e13-3c884c7e0311" start_index="0" end="d5d5782c-489e-4304-9b38-8b6a751471a6" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7e69020c-148e-4bc9-979b-d596f5afed1f" start_index="0" end="4847187c-ff80-484b-a041-d51d04c3e7cd" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7e69020c-148e-4bc9-979b-d596f5afed1f" start_index="0" end="f851aa59-4231-4990-b812-3e292c8b9055" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7e69020c-148e-4bc9-979b-d596f5afed1f" start_index="0" end="4c2a5a5c-31fc-4fbc-bc84-cb7582c1af6b" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="7e69020c-148e-4bc9-979b-d596f5afed1f" start_index="0" end="7ec7bacf-e397-499c-960a-e6cdf4341cba" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7e69020c-148e-4bc9-979b-d596f5afed1f" start_index="0" end="b21d6ee7-977d-44bf-8274-d0ce72ede0a8" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7e69020c-148e-4bc9-979b-d596f5afed1f" start_index="0" end="ca0a47d2-26af-4f93-b8a7-5bc26866af98" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="85ef2fe9-43ab-415a-bebb-9b321b470057" start_index="0" end="756ff5ae-7f33-435d-a511-8d0c374056e7" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="85ef2fe9-43ab-415a-bebb-9b321b470057" start_index="0" end="75c3823f-6205-446a-b597-66c8ceb2aae7" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f851aa59-4231-4990-b812-3e292c8b9055" start_index="0" end="96e38089-201e-4d9d-bdcc-0706d6f6b5c9" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f851aa59-4231-4990-b812-3e292c8b9055" start_index="0" end="d01dc599-e71e-4634-8187-68a1c9ef9a0c" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="28d06a4b-83af-430e-b24a-95451ef5cb10" start_index="0" end="a6e42b9e-57c1-4793-b50b-6a3e0bbfc790" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="a6e42b9e-57c1-4793-b50b-6a3e0bbfc790" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="10" portType="0" />
    <Dynamo.Models.ConnectorModel start="5a06cf0b-2e98-4173-8f75-16d4b587d864" start_index="0" end="b76d38ae-2dbc-4ea0-af12-a1a6424589c0" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="5a06cf0b-2e98-4173-8f75-16d4b587d864" start_index="0" end="763ac683-0f60-4681-bd7c-65074ce9c4bd" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="763ac683-0f60-4681-bd7c-65074ce9c4bd" start_index="0" end="f4269aaf-9384-40ee-8269-b0836ca82d71" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="763ac683-0f60-4681-bd7c-65074ce9c4bd" start_index="0" end="59322da8-84c2-4652-aaed-b6043c40610e" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="763ac683-0f60-4681-bd7c-65074ce9c4bd" start_index="0" end="a7e9f424-9740-4d40-afd1-1f4aae322780" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="763ac683-0f60-4681-bd7c-65074ce9c4bd" start_index="0" end="45748629-e625-430b-b33a-b2c437d57dbb" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="763ac683-0f60-4681-bd7c-65074ce9c4bd" start_index="0" end="7816939f-d2e5-4c40-8099-0ed64d83d87c" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="763ac683-0f60-4681-bd7c-65074ce9c4bd" start_index="0" end="d0fa09a3-6709-4d90-ae37-7cd0127d6268" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="79dde83d-39a3-4872-8118-5d8dc6101d79" start_index="0" end="a804ffd8-8608-4ea5-8562-3962321c1018" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="75c3823f-6205-446a-b597-66c8ceb2aae7" start_index="0" end="4c2a5a5c-31fc-4fbc-bc84-cb7582c1af6b" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a08aff48-d005-4d30-8495-541bb9038a09" start_index="0" end="f851aa59-4231-4990-b812-3e292c8b9055" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="756ff5ae-7f33-435d-a511-8d0c374056e7" start_index="0" end="a08aff48-d005-4d30-8495-541bb9038a09" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="4c2a5a5c-31fc-4fbc-bc84-cb7582c1af6b" start_index="0" end="abb54e12-9c90-45ec-b444-d035df4e8b8f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="aad2be8b-99c5-41f1-8069-657f1764bde3" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="10" portType="0" />
    <Dynamo.Models.ConnectorModel start="95b94dbb-a22e-4401-9cda-8f4e80c0f917" start_index="0" end="b76d38ae-2dbc-4ea0-af12-a1a6424589c0" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="bbc28dfc-3a25-48c9-a7ce-c135e908e8cc" start_index="0" end="aad2be8b-99c5-41f1-8069-657f1764bde3" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="9fa3bf57-d086-4243-8d93-07743788215c" start_index="0" end="98d8b33d-24f5-4dbc-a08a-7223f00f876f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="9fa3bf57-d086-4243-8d93-07743788215c" start_index="0" end="e4948c89-2144-49df-9f65-6b94b0f9f835" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="98d8b33d-24f5-4dbc-a08a-7223f00f876f" start_index="0" end="2f01519a-2961-49f2-bbe3-5851e41c3a3b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="2f01519a-2961-49f2-bbe3-5851e41c3a3b" start_index="0" end="183a0e0e-704f-409a-afbc-bb46f0e7e324" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="aa5a9f67-df7b-44c6-8baa-a581ef4dcd54" start_index="0" end="6c859c4d-2bf6-4683-9a74-bef10bd3886d" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="d9e83557-2578-4517-afba-7e2644d31b07" start_index="0" end="a03a8666-847d-460e-8a8c-2f50a08a2e22" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="d9e83557-2578-4517-afba-7e2644d31b07" start_index="0" end="56f8f0a2-9053-4e49-9e4c-9fcd34781bea" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="d9e83557-2578-4517-afba-7e2644d31b07" start_index="0" end="60859769-181d-4db8-9775-b6ad7f1734f6" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="d9e83557-2578-4517-afba-7e2644d31b07" start_index="0" end="cd773962-79d4-4056-9ec3-671f63e28616" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d9e83557-2578-4517-afba-7e2644d31b07" start_index="0" end="07f2448e-8578-4d69-a2b1-d0036869e0c4" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d9e83557-2578-4517-afba-7e2644d31b07" start_index="0" end="2413fd13-5342-419c-8d6e-d3d3b2400a3f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="e4948c89-2144-49df-9f65-6b94b0f9f835" start_index="0" end="60859769-181d-4db8-9775-b6ad7f1734f6" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="e4948c89-2144-49df-9f65-6b94b0f9f835" start_index="0" end="2dd3181d-7291-4edf-8068-4a3192c6627d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="9f1260d0-64a1-4f4f-94e3-7a48ff52a6f5" start_index="0" end="60859769-181d-4db8-9775-b6ad7f1734f6" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="60859769-181d-4db8-9775-b6ad7f1734f6" start_index="0" end="50e5733f-1184-4640-955f-b48ab15aa79f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="60859769-181d-4db8-9775-b6ad7f1734f6" start_index="0" end="973955fd-68a4-4aa7-9b4b-2014274f9d88" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="50e5733f-1184-4640-955f-b48ab15aa79f" start_index="0" end="2546f451-8d99-4ff1-b0c3-bd4f1007a246" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="50e5733f-1184-4640-955f-b48ab15aa79f" start_index="0" end="fed40ad0-41a7-4aaa-8e6c-c96f18f65067" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="973955fd-68a4-4aa7-9b4b-2014274f9d88" start_index="0" end="777be676-85a3-40ea-9b51-046b82676151" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="973955fd-68a4-4aa7-9b4b-2014274f9d88" start_index="0" end="d5dd44e8-471d-4744-b003-c5806a8881de" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="777be676-85a3-40ea-9b51-046b82676151" start_index="0" end="aad2be8b-99c5-41f1-8069-657f1764bde3" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="777be676-85a3-40ea-9b51-046b82676151" start_index="0" end="a6e42b9e-57c1-4793-b50b-6a3e0bbfc790" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="777be676-85a3-40ea-9b51-046b82676151" start_index="0" end="28d06a4b-83af-430e-b24a-95451ef5cb10" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="777be676-85a3-40ea-9b51-046b82676151" start_index="0" end="bbc28dfc-3a25-48c9-a7ce-c135e908e8cc" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="777be676-85a3-40ea-9b51-046b82676151" start_index="0" end="275be690-5a3f-485b-80f7-ac8d19efe42d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="777be676-85a3-40ea-9b51-046b82676151" start_index="0" end="fd6d25bd-d88d-4cf4-8782-f542af194703" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="777be676-85a3-40ea-9b51-046b82676151" start_index="0" end="07a599e5-558f-4934-9cae-8527bb18e24c" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="777be676-85a3-40ea-9b51-046b82676151" start_index="0" end="1fee66bf-756f-47be-81bc-059d7b7b49b2" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="2546f451-8d99-4ff1-b0c3-bd4f1007a246" start_index="0" end="7e69020c-148e-4bc9-979b-d596f5afed1f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="2546f451-8d99-4ff1-b0c3-bd4f1007a246" start_index="0" end="453022bb-860d-4177-82ce-88a7dcea4e91" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="2546f451-8d99-4ff1-b0c3-bd4f1007a246" start_index="0" end="af947995-a8ab-4eec-93f9-fc6c56ab9069" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="2dd3181d-7291-4edf-8068-4a3192c6627d" start_index="0" end="28d06a4b-83af-430e-b24a-95451ef5cb10" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="2dd3181d-7291-4edf-8068-4a3192c6627d" start_index="0" end="bbc28dfc-3a25-48c9-a7ce-c135e908e8cc" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="2dd3181d-7291-4edf-8068-4a3192c6627d" start_index="0" end="275be690-5a3f-485b-80f7-ac8d19efe42d" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="2dd3181d-7291-4edf-8068-4a3192c6627d" start_index="0" end="a6e42b9e-57c1-4793-b50b-6a3e0bbfc790" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="2dd3181d-7291-4edf-8068-4a3192c6627d" start_index="0" end="aad2be8b-99c5-41f1-8069-657f1764bde3" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="d96a4561-f794-44fe-917c-550f6da309ca" start_index="0" end="60859769-181d-4db8-9775-b6ad7f1734f6" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="b76d38ae-2dbc-4ea0-af12-a1a6424589c0" start_index="0" end="a8a06083-aca9-4473-be7c-7872ba229af6" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b76d38ae-2dbc-4ea0-af12-a1a6424589c0" start_index="0" end="7feba069-bf63-4679-ae86-ae270402c284" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="6ce0235a-0a09-44d5-afd7-0966ddc3dffc" start_index="0" end="b76d38ae-2dbc-4ea0-af12-a1a6424589c0" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="6ce0235a-0a09-44d5-afd7-0966ddc3dffc" start_index="0" end="50232e62-bb38-4c4f-b50d-87b3345e8ffc" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="62fb154f-41e3-4bf0-b8f8-248b2847d0de" start_index="0" end="c421f0fb-5829-4b12-9739-ab162af42cb4" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="e371a115-fc90-4303-a97b-9585167c5739" start_index="0" end="0c658d97-adad-4dc8-8fda-7950196d433d" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="0c658d97-adad-4dc8-8fda-7950196d433d" start_index="0" end="8cb84777-6039-49fe-9589-d4b0c99b80ee" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="0c658d97-adad-4dc8-8fda-7950196d433d" start_index="0" end="c8f7de20-6b12-487b-bf1b-48330d19ae9a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="96e38089-201e-4d9d-bdcc-0706d6f6b5c9" start_index="0" end="0c658d97-adad-4dc8-8fda-7950196d433d" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="96e38089-201e-4d9d-bdcc-0706d6f6b5c9" start_index="0" end="6eb46a0f-e1da-468c-a7b4-6b4af84b6600" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="5e2453e0-6fa3-431f-8bc2-6af12cd06e47" start_index="0" end="1a2a68c8-0533-4914-bdd3-367f1a306821" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="5e2453e0-6fa3-431f-8bc2-6af12cd06e47" start_index="0" end="d5d5782c-489e-4304-9b38-8b6a751471a6" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="44784fc5-fb21-4e94-a832-f79bffe92063" start_index="0" end="a3c19f8c-6b06-4a37-b22e-fda09454c617" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="44784fc5-fb21-4e94-a832-f79bffe92063" start_index="0" end="12939b65-2328-4bf0-804f-fe86f8bac92f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="d01dc599-e71e-4634-8187-68a1c9ef9a0c" start_index="0" end="6f53f637-8b26-4ad8-90a4-46e425884827" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d01dc599-e71e-4634-8187-68a1c9ef9a0c" start_index="0" end="abb54e12-9c90-45ec-b444-d035df4e8b8f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="b21d6ee7-977d-44bf-8274-d0ce72ede0a8" start_index="0" end="ca0a47d2-26af-4f93-b8a7-5bc26866af98" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b21d6ee7-977d-44bf-8274-d0ce72ede0a8" start_index="0" end="eaae68ca-837f-4bed-9e58-cff8ae1329bb" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ca0a47d2-26af-4f93-b8a7-5bc26866af98" start_index="0" end="eca8f669-4222-4af6-80f6-eb21915bc1e8" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="50232e62-bb38-4c4f-b50d-87b3345e8ffc" start_index="0" end="dd5e0569-228b-47de-8b41-3c3e9992047d" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="237d38a4-eb21-47a2-8fd5-4d3fbd8ce407" start_index="0" end="8d4d07be-682a-42eb-af22-21e2671b1bef" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="237d38a4-eb21-47a2-8fd5-4d3fbd8ce407" start_index="0" end="8d4d07be-682a-42eb-af22-21e2671b1bef" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="39341a42-e9a4-44cf-81d4-4d510fd5cf5a" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="8" portType="0" />
    <Dynamo.Models.ConnectorModel start="39341a42-e9a4-44cf-81d4-4d510fd5cf5a" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="8" portType="0" />
    <Dynamo.Models.ConnectorModel start="39341a42-e9a4-44cf-81d4-4d510fd5cf5a" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="8" portType="0" />
    <Dynamo.Models.ConnectorModel start="1da4767c-6bd5-46a0-9470-fbe760559ab4" start_index="0" end="a6e42b9e-57c1-4793-b50b-6a3e0bbfc790" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="1da4767c-6bd5-46a0-9470-fbe760559ab4" start_index="0" end="aad2be8b-99c5-41f1-8069-657f1764bde3" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="1da4767c-6bd5-46a0-9470-fbe760559ab4" start_index="0" end="275be690-5a3f-485b-80f7-ac8d19efe42d" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="1da4767c-6bd5-46a0-9470-fbe760559ab4" start_index="0" end="28d06a4b-83af-430e-b24a-95451ef5cb10" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="1da4767c-6bd5-46a0-9470-fbe760559ab4" start_index="0" end="bbc28dfc-3a25-48c9-a7ce-c135e908e8cc" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="1da4767c-6bd5-46a0-9470-fbe760559ab4" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="11" portType="0" />
    <Dynamo.Models.ConnectorModel start="1da4767c-6bd5-46a0-9470-fbe760559ab4" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="11" portType="0" />
    <Dynamo.Models.ConnectorModel start="1da4767c-6bd5-46a0-9470-fbe760559ab4" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="11" portType="0" />
    <Dynamo.Models.ConnectorModel start="885d8729-0cae-4b08-8a9b-4ad0d0ca7e39" start_index="0" end="5a06cf0b-2e98-4173-8f75-16d4b587d864" end_index="7" portType="0" />
    <Dynamo.Models.ConnectorModel start="885d8729-0cae-4b08-8a9b-4ad0d0ca7e39" start_index="0" end="a239fc6e-d882-484b-9cb4-4bd033383935" end_index="7" portType="0" />
    <Dynamo.Models.ConnectorModel start="885d8729-0cae-4b08-8a9b-4ad0d0ca7e39" start_index="0" end="95b94dbb-a22e-4401-9cda-8f4e80c0f917" end_index="7" portType="0" />
    <Dynamo.Models.ConnectorModel start="c421f0fb-5829-4b12-9739-ab162af42cb4" start_index="0" end="86dfd9e1-d79c-4167-9521-4dfde7231176" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="a1bd7c84-7ec2-4a34-966b-c521d7cdd803" start_index="0" end="dd5e0569-228b-47de-8b41-3c3e9992047d" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="8acaaa64-cba1-403c-a443-8a0de45ba711" start_index="0" end="c8f7de20-6b12-487b-bf1b-48330d19ae9a" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="ab3bd6e2-8be9-4de3-8f87-f09d815d7938" start_index="0" end="8acaaa64-cba1-403c-a443-8a0de45ba711" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="abb54e12-9c90-45ec-b444-d035df4e8b8f" start_index="0" end="ab3bd6e2-8be9-4de3-8f87-f09d815d7938" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="eca8f669-4222-4af6-80f6-eb21915bc1e8" start_index="0" end="abb54e12-9c90-45ec-b444-d035df4e8b8f" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="b4d71512-4181-4063-981b-5eeeb8de26e9" start_index="0" end="0c658d97-adad-4dc8-8fda-7950196d433d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="c8f7de20-6b12-487b-bf1b-48330d19ae9a" start_index="0" end="4a00ac65-73ae-4219-8cfa-91b58d0cbd60" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d95d732a-0763-4032-af0e-8457b8dc6db1" start_index="0" end="e7225980-f9d5-478a-be88-21343338f1f1" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d0fa09a3-6709-4d90-ae37-7cd0127d6268" start_index="0" end="01d5888e-08ea-4c87-b189-98ceda20fa1b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="01d5888e-08ea-4c87-b189-98ceda20fa1b" start_index="0" end="fd0b0f27-3078-4dad-95d7-be9fd67ae15b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="01d5888e-08ea-4c87-b189-98ceda20fa1b" start_index="0" end="ab80b6dc-dae9-41e6-a626-445b0586332b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="e7225980-f9d5-478a-be88-21343338f1f1" start_index="0" end="01d5888e-08ea-4c87-b189-98ceda20fa1b" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="75cd1c97-397b-4206-9553-ad9abe567037" start_index="1" end="fd0b0f27-3078-4dad-95d7-be9fd67ae15b" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="ab80b6dc-dae9-41e6-a626-445b0586332b" start_index="0" end="6eb46a0f-e1da-468c-a7b4-6b4af84b6600" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="6eb46a0f-e1da-468c-a7b4-6b4af84b6600" start_index="0" end="5ee75006-ac1f-4700-abd5-1e947c9d6bf8" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="5ee75006-ac1f-4700-abd5-1e947c9d6bf8" start_index="0" end="5fbb5c68-3ccc-4144-bb6e-47be5aadcc8a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="5fbb5c68-3ccc-4144-bb6e-47be5aadcc8a" start_index="0" end="6b22c561-419b-42aa-95ff-8d69310bc573" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="5fbb5c68-3ccc-4144-bb6e-47be5aadcc8a" start_index="0" end="86062ee4-c287-4734-ac27-66e8c7fe4773" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="4a00ac65-73ae-4219-8cfa-91b58d0cbd60" start_index="0" end="c5b9e966-f814-4411-ab01-8ecfb7375870" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="c5b9e966-f814-4411-ab01-8ecfb7375870" start_index="0" end="6b22c561-419b-42aa-95ff-8d69310bc573" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="c5b9e966-f814-4411-ab01-8ecfb7375870" start_index="0" end="86062ee4-c287-4734-ac27-66e8c7fe4773" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="183a0e0e-704f-409a-afbc-bb46f0e7e324" start_index="0" end="4493f812-d429-4c80-84c6-f5ba85f0115d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="183a0e0e-704f-409a-afbc-bb46f0e7e324" start_index="0" end="3ad9a04a-51c9-4be1-b228-e2c70c62854c" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="4493f812-d429-4c80-84c6-f5ba85f0115d" start_index="0" end="ce8d14dd-fddd-42b8-be9a-8cc38062c788" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="4493f812-d429-4c80-84c6-f5ba85f0115d" start_index="0" end="a03a8666-847d-460e-8a8c-2f50a08a2e22" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ce8d14dd-fddd-42b8-be9a-8cc38062c788" start_index="0" end="25efc871-4a5f-4561-8069-f2ea52a23294" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ce8d14dd-fddd-42b8-be9a-8cc38062c788" start_index="0" end="7ea7a253-ae46-402f-9c57-797db8b5ddd6" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="41da454f-1a1e-47ec-97b1-184f7b20da7c" start_index="0" end="e34d7277-20b3-4e9d-85e5-f32914cbd4bd" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="41da454f-1a1e-47ec-97b1-184f7b20da7c" start_index="1" end="e34d7277-20b3-4e9d-85e5-f32914cbd4bd" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="e34d7277-20b3-4e9d-85e5-f32914cbd4bd" start_index="0" end="6c859c4d-2bf6-4683-9a74-bef10bd3886d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="e34d7277-20b3-4e9d-85e5-f32914cbd4bd" start_index="0" end="eae8044d-018a-4b18-9952-bce38c14bb3f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="25efc871-4a5f-4561-8069-f2ea52a23294" start_index="0" end="aff25741-e0fc-451b-9102-24b9dd0ddf92" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7ea7a253-ae46-402f-9c57-797db8b5ddd6" start_index="0" end="118799ea-9c63-4f15-92d9-cc9033552cb0" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="118799ea-9c63-4f15-92d9-cc9033552cb0" start_index="0" end="901ee76e-e4be-4072-8425-66f2050bc133" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="118799ea-9c63-4f15-92d9-cc9033552cb0" start_index="0" end="e4b9550f-4d6b-4d42-9e92-3993bdd03028" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="aff25741-e0fc-451b-9102-24b9dd0ddf92" start_index="0" end="d9e83557-2578-4517-afba-7e2644d31b07" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="aff25741-e0fc-451b-9102-24b9dd0ddf92" start_index="0" end="f19c159a-ec01-40c6-9ca3-fe6587a4b90c" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="6c859c4d-2bf6-4683-9a74-bef10bd3886d" start_index="0" end="d9e83557-2578-4517-afba-7e2644d31b07" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="6c859c4d-2bf6-4683-9a74-bef10bd3886d" start_index="0" end="e4b9550f-4d6b-4d42-9e92-3993bdd03028" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a03a8666-847d-460e-8a8c-2f50a08a2e22" start_index="0" end="56f8f0a2-9053-4e49-9e4c-9fcd34781bea" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="a03a8666-847d-460e-8a8c-2f50a08a2e22" start_index="0" end="cd773962-79d4-4056-9ec3-671f63e28616" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a03a8666-847d-460e-8a8c-2f50a08a2e22" start_index="0" end="eae8044d-018a-4b18-9952-bce38c14bb3f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="a03a8666-847d-460e-8a8c-2f50a08a2e22" start_index="0" end="937db373-64e5-4931-8c24-5f23743700aa" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="56f8f0a2-9053-4e49-9e4c-9fcd34781bea" start_index="0" end="9f1260d0-64a1-4f4f-94e3-7a48ff52a6f5" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="cd773962-79d4-4056-9ec3-671f63e28616" start_index="0" end="186f6ea4-50f1-44cd-ac17-ecd884ecaac1" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="186f6ea4-50f1-44cd-ac17-ecd884ecaac1" start_index="0" end="00997a11-4ca2-486f-8531-ed0e03b6c6d5" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="793f2423-ce5f-44f4-a2e9-1c5689b14095" start_index="0" end="00997a11-4ca2-486f-8531-ed0e03b6c6d5" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="eae8044d-018a-4b18-9952-bce38c14bb3f" start_index="0" end="07f2448e-8578-4d69-a2b1-d0036869e0c4" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="07f2448e-8578-4d69-a2b1-d0036869e0c4" start_index="0" end="c8f24ab2-44f4-4546-8ad3-f92cb457088b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="c8f24ab2-44f4-4546-8ad3-f92cb457088b" start_index="0" end="edca3d25-54b8-4fba-8360-a39f85c356e5" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="92a88845-a30f-450e-8a68-8a465cff4a74" start_index="0" end="edca3d25-54b8-4fba-8360-a39f85c356e5" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7a43b7f5-8a35-411c-8bb3-fbb74feb876b" start_index="0" end="0b83fe19-c5e6-44ad-b444-36ce8fa87e6a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="3ad9a04a-51c9-4be1-b228-e2c70c62854c" start_index="0" end="0b83fe19-c5e6-44ad-b444-36ce8fa87e6a" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="937db373-64e5-4931-8c24-5f23743700aa" start_index="0" end="007f0367-de33-44e9-92bc-8af3f0c5e45e" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="e4b9550f-4d6b-4d42-9e92-3993bdd03028" start_index="0" end="d9e83557-2578-4517-afba-7e2644d31b07" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="007f0367-de33-44e9-92bc-8af3f0c5e45e" start_index="0" end="5d75b2fd-2400-490d-87ce-2945e79c9638" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="007f0367-de33-44e9-92bc-8af3f0c5e45e" start_index="0" end="18e12442-9a45-4695-9ccd-e96cd98a5214" end_index="0" portType="0" />
  </Connectors>
  <Notes />
</Workspace>